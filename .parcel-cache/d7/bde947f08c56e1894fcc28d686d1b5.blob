var $e7956024f49d6afb14ac8c96d311d725$exports = {};
var $e7956024f49d6afb14ac8c96d311d725$var$Symbol = $parcel$require("e7956024f49d6afb14ac8c96d311d725", "./_Symbol"),
    $e7956024f49d6afb14ac8c96d311d725$var$isArguments = $parcel$require("e7956024f49d6afb14ac8c96d311d725", "./isArguments"),
    $e7956024f49d6afb14ac8c96d311d725$var$isArray = $parcel$require("e7956024f49d6afb14ac8c96d311d725", "./isArray");
/** Built-in value references. */

var $e7956024f49d6afb14ac8c96d311d725$var$spreadableSymbol = $e7956024f49d6afb14ac8c96d311d725$var$Symbol ? $e7956024f49d6afb14ac8c96d311d725$var$Symbol.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */

function $e7956024f49d6afb14ac8c96d311d725$var$isFlattenable(value) {
  return $e7956024f49d6afb14ac8c96d311d725$var$isArray(value) || $e7956024f49d6afb14ac8c96d311d725$var$isArguments(value) || !!($e7956024f49d6afb14ac8c96d311d725$var$spreadableSymbol && value && value[$e7956024f49d6afb14ac8c96d311d725$var$spreadableSymbol]);
}

$e7956024f49d6afb14ac8c96d311d725$exports = $e7956024f49d6afb14ac8c96d311d725$var$isFlattenable;