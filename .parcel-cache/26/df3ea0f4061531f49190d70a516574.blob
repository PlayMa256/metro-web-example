var $ab74cb7186f6469d4890261a767b42$exports = {};
$parcel$require("33ab74cb7186f6469d4890261a767b42", "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "@babel/runtime/helpers/esm/inheritsLoose");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "prop-types");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "react");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "react-dom");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "./config");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "./utils/PropTypes");
$parcel$require("33ab74cb7186f6469d4890261a767b42", "./TransitionGroupContext");
var $ab74cb7186f6469d4890261a767b42$export$UNMOUNTED = 'unmounted';
$ab74cb7186f6469d4890261a767b42$exports.UNMOUNTED = $ab74cb7186f6469d4890261a767b42$export$UNMOUNTED;
var $ab74cb7186f6469d4890261a767b42$export$EXITED = 'exited';
$ab74cb7186f6469d4890261a767b42$exports.EXITED = $ab74cb7186f6469d4890261a767b42$export$EXITED;
var $ab74cb7186f6469d4890261a767b42$export$ENTERING = 'entering';
$ab74cb7186f6469d4890261a767b42$exports.ENTERING = $ab74cb7186f6469d4890261a767b42$export$ENTERING;
var $ab74cb7186f6469d4890261a767b42$export$ENTERED = 'entered';
$ab74cb7186f6469d4890261a767b42$exports.ENTERED = $ab74cb7186f6469d4890261a767b42$export$ENTERED;
var $ab74cb7186f6469d4890261a767b42$export$EXITING = 'exiting';
/**
 * The Transition component lets you describe a transition from one component
 * state to another _over time_ with a simple declarative API. Most commonly
 * it's used to animate the mounting and unmounting of a component, but can also
 * be used to describe in-place transition states as well.
 *
 * ---
 *
 * **Note**: `Transition` is a platform-agnostic base component. If you're using
 * transitions in CSS, you'll probably want to use
 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
 * instead. It inherits all the features of `Transition`, but contains
 * additional features necessary to play nice with CSS transitions (hence the
 * name of the component).
 *
 * ---
 *
 * By default the `Transition` component does not alter the behavior of the
 * component it renders, it only tracks "enter" and "exit" states for the
 * components. It's up to you to give meaning and effect to those states. For
 * example we can add styles to a component when it enters or exits:
 *
 * ```jsx
 * import { Transition } from 'react-transition-group';
 *
 * const duration = 300;
 *
 * const defaultStyle = {
 *   transition: `opacity ${duration}ms ease-in-out`,
 *   opacity: 0,
 * }
 *
 * const transitionStyles = {
 *   entering: { opacity: 1 },
 *   entered:  { opacity: 1 },
 *   exiting:  { opacity: 0 },
 *   exited:  { opacity: 0 },
 * };
 *
 * const Fade = ({ in: inProp }) => (
 *   <Transition in={inProp} timeout={duration}>
 *     {state => (
 *       <div style={{
 *         ...defaultStyle,
 *         ...transitionStyles[state]
 *       }}>
 *         I'm a fade Transition!
 *       </div>
 *     )}
 *   </Transition>
 * );
 * ```
 *
 * There are 4 main states a Transition can be in:
 *  - `'entering'`
 *  - `'entered'`
 *  - `'exiting'`
 *  - `'exited'`
 *
 * Transition state is toggled via the `in` prop. When `true` the component
 * begins the "Enter" stage. During this stage, the component will shift from
 * its current transition state, to `'entering'` for the duration of the
 * transition and then to the `'entered'` stage once it's complete. Let's take
 * the following example (we'll use the
 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
 *
 * ```jsx
 * function App() {
 *   const [inProp, setInProp] = useState(false);
 *   return (
 *     <div>
 *       <Transition in={inProp} timeout={500}>
 *         {state => (
 *           // ...
 *         )}
 *       </Transition>
 *       <button onClick={() => setInProp(true)}>
 *         Click to Enter
 *       </button>
 *     </div>
 *   );
 * }
 * ```
 *
 * When the button is clicked the component will shift to the `'entering'` state
 * and stay there for 500ms (the value of `timeout`) before it finally switches
 * to `'entered'`.
 *
 * When `in` is `false` the same thing happens except the state moves from
 * `'exiting'` to `'exited'`.
 */

$ab74cb7186f6469d4890261a767b42$exports.EXITING = $ab74cb7186f6469d4890261a767b42$export$EXITING;

var $ab74cb7186f6469d4890261a767b42$export$default =
/*#__PURE__*/
function (_React$Component) {
  $ab74cb7186f6469d4890261a767b42$import$_inheritsLoose(Transition, _React$Component);

  function Transition(props, context) {
    var _this;

    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;

    if (props.in) {
      if (appear) {
        initialStatus = $ab74cb7186f6469d4890261a767b42$export$EXITED;
        _this.appearStatus = $ab74cb7186f6469d4890261a767b42$export$ENTERING;
      } else {
        initialStatus = $ab74cb7186f6469d4890261a767b42$export$ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = $ab74cb7186f6469d4890261a767b42$export$UNMOUNTED;
      } else {
        initialStatus = $ab74cb7186f6469d4890261a767b42$export$EXITED;
      }
    }

    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }

  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;

    if (nextIn && prevState.status === $ab74cb7186f6469d4890261a767b42$export$UNMOUNTED) {
      return {
        status: $ab74cb7186f6469d4890261a767b42$export$EXITED
      };
    }

    return null;
  }; // getSnapshotBeforeUpdate(prevProps) {
  //   let nextStatus = null
  //   if (prevProps !== this.props) {
  //     const { status } = this.state
  //     if (this.props.in) {
  //       if (status !== ENTERING && status !== ENTERED) {
  //         nextStatus = ENTERING
  //       }
  //     } else {
  //       if (status === ENTERING || status === ENTERED) {
  //         nextStatus = EXITING
  //       }
  //     }
  //   }
  //   return { nextStatus }
  // }


  var _proto = Transition.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;

    if (prevProps !== this.props) {
      var status = this.state.status;

      if (this.props.in) {
        if (status !== $ab74cb7186f6469d4890261a767b42$export$ENTERING && status !== $ab74cb7186f6469d4890261a767b42$export$ENTERED) {
          nextStatus = $ab74cb7186f6469d4890261a767b42$export$ENTERING;
        }
      } else {
        if (status === $ab74cb7186f6469d4890261a767b42$export$ENTERING || status === $ab74cb7186f6469d4890261a767b42$export$ENTERED) {
          nextStatus = $ab74cb7186f6469d4890261a767b42$export$EXITING;
        }
      }
    }

    this.updateStatus(false, nextStatus);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };

  _proto.getTimeouts = function getTimeouts() {
    var timeout = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout;

    if (timeout != null && typeof timeout !== 'number') {
      exit = timeout.exit;
      enter = timeout.enter; // TODO: remove fallback for next major

      appear = timeout.appear !== undefined ? timeout.appear : enter;
    }

    return {
      exit: exit,
      enter: enter,
      appear: appear
    };
  };

  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }

    if (nextStatus !== null) {
      // nextStatus will always be ENTERING or EXITING.
      this.cancelNextCallback();
      var node = $ab74cb7186f6469d4890261a767b42$import$ReactDOM.findDOMNode(this);

      if (nextStatus === $ab74cb7186f6469d4890261a767b42$export$ENTERING) {
        this.performEnter(node, mounting);
      } else {
        this.performExit(node);
      }
    } else if (this.props.unmountOnExit && this.state.status === $ab74cb7186f6469d4890261a767b42$export$EXITED) {
      this.setState({
        status: $ab74cb7186f6469d4890261a767b42$export$UNMOUNTED
      });
    }
  };

  _proto.performEnter = function performEnter(node, mounting) {
    var _this2 = this;

    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
    // if we are mounting and running this it means appear _must_ be set

    if (!mounting && !enter || $ab74cb7186f6469d4890261a767b42$import$config.disabled) {
      this.safeSetState({
        status: $ab74cb7186f6469d4890261a767b42$export$ENTERED
      }, function () {
        _this2.props.onEntered(node);
      });
      return;
    }

    this.props.onEnter(node, appearing);
    this.safeSetState({
      status: $ab74cb7186f6469d4890261a767b42$export$ENTERING
    }, function () {
      _this2.props.onEntering(node, appearing);

      _this2.onTransitionEnd(node, enterTimeout, function () {
        _this2.safeSetState({
          status: $ab74cb7186f6469d4890261a767b42$export$ENTERED
        }, function () {
          _this2.props.onEntered(node, appearing);
        });
      });
    });
  };

  _proto.performExit = function performExit(node) {
    var _this3 = this;

    var exit = this.props.exit;
    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

    if (!exit || $ab74cb7186f6469d4890261a767b42$import$config.disabled) {
      this.safeSetState({
        status: $ab74cb7186f6469d4890261a767b42$export$EXITED
      }, function () {
        _this3.props.onExited(node);
      });
      return;
    }

    this.props.onExit(node);
    this.safeSetState({
      status: $ab74cb7186f6469d4890261a767b42$export$EXITING
    }, function () {
      _this3.props.onExiting(node);

      _this3.onTransitionEnd(node, timeouts.exit, function () {
        _this3.safeSetState({
          status: $ab74cb7186f6469d4890261a767b42$export$EXITED
        }, function () {
          _this3.props.onExited(node);
        });
      });
    });
  };

  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };

  _proto.safeSetState = function safeSetState(nextState, callback) {
    // This shouldn't be necessary, but there are weird race conditions with
    // setState callbacks and unmounting in testing, so always make sure that
    // we can cancel any pending setState callbacks after we unmount.
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };

  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;

    var active = true;

    this.nextCallback = function (event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };

    this.nextCallback.cancel = function () {
      active = false;
    };

    return this.nextCallback;
  };

  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
    this.setNextCallback(handler);
    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }

    if (this.props.addEndListener) {
      this.props.addEndListener(node, this.nextCallback);
    }

    if (timeout != null) {
      setTimeout(this.nextCallback, timeout);
    }
  };

  _proto.render = function render() {
    var status = this.state.status;

    if (status === $ab74cb7186f6469d4890261a767b42$export$UNMOUNTED) {
      return null;
    }

    var _this$props = this.props,
        children = _this$props.children,
        childProps = $ab74cb7186f6469d4890261a767b42$import$_objectWithoutPropertiesLoose(_this$props, ["children"]); // filter props for Transtition

    delete childProps.in;
    delete childProps.mountOnEnter;
    delete childProps.unmountOnExit;
    delete childProps.appear;
    delete childProps.enter;
    delete childProps.exit;
    delete childProps.timeout;
    delete childProps.addEndListener;
    delete childProps.onEnter;
    delete childProps.onEntering;
    delete childProps.onEntered;
    delete childProps.onExit;
    delete childProps.onExiting;
    delete childProps.onExited;

    if (typeof children === 'function') {
      // allows for nested Transitions
      return $ab74cb7186f6469d4890261a767b42$import$React.createElement($ab74cb7186f6469d4890261a767b42$import$TransitionGroupContext.Provider, {
        value: null
      }, children(status, childProps));
    }

    var child = $ab74cb7186f6469d4890261a767b42$import$React.Children.only(children);
    return (// allows for nested Transitions
      $ab74cb7186f6469d4890261a767b42$import$React.createElement($ab74cb7186f6469d4890261a767b42$import$TransitionGroupContext.Provider, {
        value: null
      }, $ab74cb7186f6469d4890261a767b42$import$React.cloneElement(child, childProps))
    );
  };

  return Transition;
}($ab74cb7186f6469d4890261a767b42$import$React.Component);

$ab74cb7186f6469d4890261a767b42$export$default.contextType = $ab74cb7186f6469d4890261a767b42$import$TransitionGroupContext;
$ab74cb7186f6469d4890261a767b42$export$default.propTypes = "production" !== "production" ? {
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: $ab74cb7186f6469d4890261a767b42$import$PropTypes.oneOfType([$ab74cb7186f6469d4890261a767b42$import$PropTypes.func.isRequired, $ab74cb7186f6469d4890261a767b42$import$PropTypes.element.isRequired]).isRequired,

  /**
   * Show the component; triggers the enter or exit states
   */
  in: $ab74cb7186f6469d4890261a767b42$import$PropTypes.bool,

  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: $ab74cb7186f6469d4890261a767b42$import$PropTypes.bool,

  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: $ab74cb7186f6469d4890261a767b42$import$PropTypes.bool,

  /**
   * Normally a component is not transitioned if it is shown when the
   * `<Transition>` component mounts. If you want to transition on the first
   * mount set `appear` to `true`, and the component will transition in as soon
   * as the `<Transition>` mounts.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: $ab74cb7186f6469d4890261a767b42$import$PropTypes.bool,

  /**
   * Enable or disable enter transitions.
   */
  enter: $ab74cb7186f6469d4890261a767b42$import$PropTypes.bool,

  /**
   * Enable or disable exit transitions.
   */
  exit: $ab74cb7186f6469d4890261a767b42$import$PropTypes.bool,

  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = $ab74cb7186f6469d4890261a767b42$import$timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    return pt.apply(void 0, [props].concat(args));
  },

  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. **Note:** Timeouts are still used as a fallback if provided.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func,

  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func,

  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func,

  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func,

  /**
   * Callback fired before the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func,

  /**
   * Callback fired after the "exiting" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func,

  /**
   * Callback fired after the "exited" status is applied.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: $ab74cb7186f6469d4890261a767b42$import$PropTypes.func // Name the function so it is clearer in the documentation

} : {};

function $ab74cb7186f6469d4890261a767b42$var$noop() {}

$ab74cb7186f6469d4890261a767b42$export$default.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: $ab74cb7186f6469d4890261a767b42$var$noop,
  onEntering: $ab74cb7186f6469d4890261a767b42$var$noop,
  onEntered: $ab74cb7186f6469d4890261a767b42$var$noop,
  onExit: $ab74cb7186f6469d4890261a767b42$var$noop,
  onExiting: $ab74cb7186f6469d4890261a767b42$var$noop,
  onExited: $ab74cb7186f6469d4890261a767b42$var$noop
};
$ab74cb7186f6469d4890261a767b42$export$default.UNMOUNTED = 0;
$ab74cb7186f6469d4890261a767b42$export$default.EXITED = 1;
$ab74cb7186f6469d4890261a767b42$export$default.ENTERING = 2;
$ab74cb7186f6469d4890261a767b42$export$default.ENTERED = 3;
$ab74cb7186f6469d4890261a767b42$export$default.EXITING = 4;
$ab74cb7186f6469d4890261a767b42$exports.default = $ab74cb7186f6469d4890261a767b42$export$default;