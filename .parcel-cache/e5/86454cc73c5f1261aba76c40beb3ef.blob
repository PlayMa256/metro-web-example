var $c9cf677e5ea45a6571aebb433dae74a1$exports = {};
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "@babel/runtime/helpers/esm/defineProperty");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "@babel/runtime/helpers/esm/extends");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "react");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "prop-types");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "clsx");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "../styles/withStyles");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "../styles/useTheme");
$parcel$require("c9cf677e5ea45a6571aebb433dae74a1", "../utils/capitalize");

var $c9cf677e5ea45a6571aebb433dae74a1$export$styles = function styles(theme) {
  var align = theme.direction === 'rtl' ? 'right' : 'left';
  return {
    /* Styles applied to the root element. */
    root: {
      position: 'absolute',
      bottom: 0,
      right: 0,
      top: -5,
      left: 0,
      margin: 0,
      padding: 0,
      pointerEvents: 'none',
      borderRadius: theme.shape.borderRadius,
      borderStyle: 'solid',
      borderWidth: 1,
      // Match the Input Label
      transition: theme.transitions.create(["padding-".concat(align), 'border-color', 'border-width'], {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      })
    },

    /* Styles applied to the legend element. */
    legend: {
      textAlign: 'left',
      padding: 0,
      lineHeight: '11px',
      transition: theme.transitions.create('width', {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      })
    }
  };
};
/**
 * @ignore - internal component.
 */


$c9cf677e5ea45a6571aebb433dae74a1$exports.styles = $c9cf677e5ea45a6571aebb433dae74a1$export$styles;
var $c9cf677e5ea45a6571aebb433dae74a1$var$NotchedOutline = $c9cf677e5ea45a6571aebb433dae74a1$import$React.forwardRef(function NotchedOutline(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      labelWidthProp = props.labelWidth,
      notched = props.notched,
      style = props.style,
      other = $c9cf677e5ea45a6571aebb433dae74a1$import$_objectWithoutProperties(props, ["children", "classes", "className", "labelWidth", "notched", "style"]);
  var theme = $c9cf677e5ea45a6571aebb433dae74a1$import$useTheme();
  var align = theme.direction === 'rtl' ? 'right' : 'left';
  var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0;
  return $c9cf677e5ea45a6571aebb433dae74a1$import$React.createElement("fieldset", $c9cf677e5ea45a6571aebb433dae74a1$import$_extends({
    "aria-hidden": true,
    style: $c9cf677e5ea45a6571aebb433dae74a1$import$_extends($c9cf677e5ea45a6571aebb433dae74a1$import$_defineProperty({}, "padding".concat($c9cf677e5ea45a6571aebb433dae74a1$import$capitalize(align)), 8 + (notched ? 0 : labelWidth / 2)), style),
    className: $c9cf677e5ea45a6571aebb433dae74a1$import$clsx(classes.root, className),
    ref: ref
  }, other), $c9cf677e5ea45a6571aebb433dae74a1$import$React.createElement("legend", {
    className: classes.legend,
    style: {
      // IE 11: fieldset with legend does not render
      // a border radius. This maintains consistency
      // by always having a legend rendered
      width: notched ? labelWidth : 0.01
    }
  }, $c9cf677e5ea45a6571aebb433dae74a1$import$React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: '&#8203;'
    }
  })));
});
"production" !== "production" ? $c9cf677e5ea45a6571aebb433dae74a1$var$NotchedOutline.propTypes = {
  /**
   * The content of the component.
   */
  children: $c9cf677e5ea45a6571aebb433dae74a1$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $c9cf677e5ea45a6571aebb433dae74a1$import$PropTypes.object,

  /**
   * @ignore
   */
  className: $c9cf677e5ea45a6571aebb433dae74a1$import$PropTypes.string,

  /**
   * The width of the label.
   */
  labelWidth: $c9cf677e5ea45a6571aebb433dae74a1$import$PropTypes.number.isRequired,

  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: $c9cf677e5ea45a6571aebb433dae74a1$import$PropTypes.bool.isRequired,

  /**
   * @ignore
   */
  style: $c9cf677e5ea45a6571aebb433dae74a1$import$PropTypes.object
} : void 0;
var $c9cf677e5ea45a6571aebb433dae74a1$export$default = $c9cf677e5ea45a6571aebb433dae74a1$import$withStyles($c9cf677e5ea45a6571aebb433dae74a1$export$styles, {
  name: 'PrivateNotchedOutline'
})($c9cf677e5ea45a6571aebb433dae74a1$var$NotchedOutline);
$c9cf677e5ea45a6571aebb433dae74a1$exports.default = $c9cf677e5ea45a6571aebb433dae74a1$export$default;