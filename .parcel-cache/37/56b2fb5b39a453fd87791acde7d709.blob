var $f48d4fb2e7ae643bf3f070d4ef345$exports = {};
var $f48d4fb2e7ae643bf3f070d4ef345$var$SetCache = $parcel$require("942f48d4fb2e7ae643bf3f070d4ef345", "./_SetCache"),
    $f48d4fb2e7ae643bf3f070d4ef345$var$arrayIncludes = $parcel$require("942f48d4fb2e7ae643bf3f070d4ef345", "./_arrayIncludes"),
    $f48d4fb2e7ae643bf3f070d4ef345$var$arrayIncludesWith = $parcel$require("942f48d4fb2e7ae643bf3f070d4ef345", "./_arrayIncludesWith"),
    $f48d4fb2e7ae643bf3f070d4ef345$var$arrayMap = $parcel$require("942f48d4fb2e7ae643bf3f070d4ef345", "./_arrayMap"),
    $f48d4fb2e7ae643bf3f070d4ef345$var$baseUnary = $parcel$require("942f48d4fb2e7ae643bf3f070d4ef345", "./_baseUnary"),
    $f48d4fb2e7ae643bf3f070d4ef345$var$cacheHas = $parcel$require("942f48d4fb2e7ae643bf3f070d4ef345", "./_cacheHas");
/* Built-in method references for those with the same name as other `lodash` methods. */

var $f48d4fb2e7ae643bf3f070d4ef345$var$nativeMin = Math.min;
/**
 * The base implementation of methods like `_.intersection`, without support
 * for iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of shared values.
 */

function $f48d4fb2e7ae643bf3f070d4ef345$var$baseIntersection(arrays, iteratee, comparator) {
  var includes = comparator ? $f48d4fb2e7ae643bf3f070d4ef345$var$arrayIncludesWith : $f48d4fb2e7ae643bf3f070d4ef345$var$arrayIncludes,
      length = arrays[0].length,
      othLength = arrays.length,
      othIndex = othLength,
      caches = Array(othLength),
      maxLength = Infinity,
      result = [];

  while (othIndex--) {
    var array = arrays[othIndex];

    if (othIndex && iteratee) {
      array = $f48d4fb2e7ae643bf3f070d4ef345$var$arrayMap(array, $f48d4fb2e7ae643bf3f070d4ef345$var$baseUnary(iteratee));
    }

    maxLength = $f48d4fb2e7ae643bf3f070d4ef345$var$nativeMin(array.length, maxLength);
    caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new $f48d4fb2e7ae643bf3f070d4ef345$var$SetCache(othIndex && array) : undefined;
  }

  array = arrays[0];
  var index = -1,
      seen = caches[0];

  outer: while (++index < length && result.length < maxLength) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;
    value = comparator || value !== 0 ? value : 0;

    if (!(seen ? $f48d4fb2e7ae643bf3f070d4ef345$var$cacheHas(seen, computed) : includes(result, computed, comparator))) {
      othIndex = othLength;

      while (--othIndex) {
        var cache = caches[othIndex];

        if (!(cache ? $f48d4fb2e7ae643bf3f070d4ef345$var$cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) {
          continue outer;
        }
      }

      if (seen) {
        seen.push(computed);
      }

      result.push(value);
    }
  }

  return result;
}

$f48d4fb2e7ae643bf3f070d4ef345$exports = $f48d4fb2e7ae643bf3f070d4ef345$var$baseIntersection;