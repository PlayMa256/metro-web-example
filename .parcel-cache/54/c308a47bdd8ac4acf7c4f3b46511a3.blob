var $a8c57a90f6aa4d356ce814f444fa0b26$exports = {};
var $a8c57a90f6aa4d356ce814f444fa0b26$var$baseAssignValue = $parcel$require("a8c57a90f6aa4d356ce814f444fa0b26", "./_baseAssignValue"),
    $a8c57a90f6aa4d356ce814f444fa0b26$var$eq = $parcel$require("a8c57a90f6aa4d356ce814f444fa0b26", "./eq");
/** Used for built-in method references. */

var $a8c57a90f6aa4d356ce814f444fa0b26$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */

var $a8c57a90f6aa4d356ce814f444fa0b26$var$hasOwnProperty = $a8c57a90f6aa4d356ce814f444fa0b26$var$objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function $a8c57a90f6aa4d356ce814f444fa0b26$var$assignValue(object, key, value) {
  var objValue = object[key];

  if (!($a8c57a90f6aa4d356ce814f444fa0b26$var$hasOwnProperty.call(object, key) && $a8c57a90f6aa4d356ce814f444fa0b26$var$eq(objValue, value)) || value === undefined && !(key in object)) {
    $a8c57a90f6aa4d356ce814f444fa0b26$var$baseAssignValue(object, key, value);
  }
}

$a8c57a90f6aa4d356ce814f444fa0b26$exports = $a8c57a90f6aa4d356ce814f444fa0b26$var$assignValue;