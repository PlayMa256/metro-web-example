var $ec4d46eb4f536b546899425d3a5788$exports = {};
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "@babel/runtime/helpers/esm/extends");
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "react");
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "prop-types");
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "clsx");
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "../styles/withStyles");
$parcel$require("11ec4d46eb4f536b546899425d3a5788", "../utils/capitalize");

var $ec4d46eb4f536b546899425d3a5788$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      userSelect: 'none',
      width: '1em',
      height: '1em',
      display: 'inline-block',
      fill: 'currentColor',
      flexShrink: 0,
      fontSize: theme.typography.pxToRem(24),
      transition: theme.transitions.create('fill', {
        duration: theme.transitions.duration.shorter
      })
    },

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      color: theme.palette.primary.main
    },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      color: theme.palette.secondary.main
    },

    /* Styles applied to the root element if `color="action"`. */
    colorAction: {
      color: theme.palette.action.active
    },

    /* Styles applied to the root element if `color="error"`. */
    colorError: {
      color: theme.palette.error.main
    },

    /* Styles applied to the root element if `color="disabled"`. */
    colorDisabled: {
      color: theme.palette.action.disabled
    },

    /* Styles applied to the root element if `fontSize="inherit"`. */
    fontSizeInherit: {
      fontSize: 'inherit'
    },

    /* Styles applied to the root element if `fontSize="small"`. */
    fontSizeSmall: {
      fontSize: theme.typography.pxToRem(20)
    },

    /* Styles applied to the root element if `fontSize="large"`. */
    fontSizeLarge: {
      fontSize: theme.typography.pxToRem(35)
    }
  };
};

$ec4d46eb4f536b546899425d3a5788$exports.styles = $ec4d46eb4f536b546899425d3a5788$export$styles;
var $ec4d46eb4f536b546899425d3a5788$var$SvgIcon = $ec4d46eb4f536b546899425d3a5788$import$React.forwardRef(function SvgIcon(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      _props$color = props.color,
      color = _props$color === void 0 ? 'inherit' : _props$color,
      _props$component = props.component,
      Component = _props$component === void 0 ? 'svg' : _props$component,
      _props$fontSize = props.fontSize,
      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,
      htmlColor = props.htmlColor,
      titleAccess = props.titleAccess,
      _props$viewBox = props.viewBox,
      viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
      other = $ec4d46eb4f536b546899425d3a5788$import$_objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);
  return $ec4d46eb4f536b546899425d3a5788$import$React.createElement(Component, $ec4d46eb4f536b546899425d3a5788$import$_extends({
    className: $ec4d46eb4f536b546899425d3a5788$import$clsx(classes.root, className, color !== 'inherit' && classes["color".concat($ec4d46eb4f536b546899425d3a5788$import$capitalize(color))], fontSize !== 'default' && classes["fontSize".concat($ec4d46eb4f536b546899425d3a5788$import$capitalize(fontSize))]),
    focusable: "false",
    viewBox: viewBox,
    color: htmlColor,
    "aria-hidden": titleAccess ? 'false' : 'true',
    role: titleAccess ? 'img' : 'presentation',
    ref: ref
  }, other), children, titleAccess ? $ec4d46eb4f536b546899425d3a5788$import$React.createElement("title", null, titleAccess) : null);
});
"production" !== "production" ? $ec4d46eb4f536b546899425d3a5788$var$SvgIcon.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * Node passed into the SVG element.
   */
  children: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.object,

  /**
   * @ignore
   */
  className: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.string,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   */
  color: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),

  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   */
  component: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.elementType,

  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   */
  fontSize: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.oneOf(['default', 'inherit', 'large', 'small']),

  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.string,

  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this property.
   */
  shapeRendering: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.string,

  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.string,

  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   */
  viewBox: $ec4d46eb4f536b546899425d3a5788$import$PropTypes.string
} : void 0;
$ec4d46eb4f536b546899425d3a5788$var$SvgIcon.muiName = 'SvgIcon';
var $ec4d46eb4f536b546899425d3a5788$export$default = $ec4d46eb4f536b546899425d3a5788$import$withStyles($ec4d46eb4f536b546899425d3a5788$export$styles, {
  name: 'MuiSvgIcon'
})($ec4d46eb4f536b546899425d3a5788$var$SvgIcon);
$ec4d46eb4f536b546899425d3a5788$exports.default = $ec4d46eb4f536b546899425d3a5788$export$default;