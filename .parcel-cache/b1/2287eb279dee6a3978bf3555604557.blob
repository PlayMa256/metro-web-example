var $bed4ab6639b32c089500b85303a5b461$exports = {};
$parcel$require("bed4ab6639b32c089500b85303a5b461", "jss");
var $bed4ab6639b32c089500b85303a5b461$var$now = Date.now();
var $bed4ab6639b32c089500b85303a5b461$var$fnValuesNs = "fnValues" + $bed4ab6639b32c089500b85303a5b461$var$now;
var $bed4ab6639b32c089500b85303a5b461$var$fnRuleNs = "fnStyle" + ++$bed4ab6639b32c089500b85303a5b461$var$now;

function $bed4ab6639b32c089500b85303a5b461$export$default() {
  return {
    onCreateRule: function onCreateRule(name, decl, options) {
      if (typeof decl !== 'function') return null;
      var rule = $bed4ab6639b32c089500b85303a5b461$import$createRule(name, {}, options);
      rule[$bed4ab6639b32c089500b85303a5b461$var$fnRuleNs] = decl;
      return rule;
    },
    onProcessStyle: function onProcessStyle(style, rule) {
      // We need to extract function values from the declaration, so that we can keep core unaware of them.
      // We need to do that only once.
      // We don't need to extract functions on each style update, since this can happen only once.
      // We don't support function values inside of function rules.
      if ($bed4ab6639b32c089500b85303a5b461$var$fnValuesNs in rule || $bed4ab6639b32c089500b85303a5b461$var$fnRuleNs in rule) return style;
      var fnValues = {};

      for (var prop in style) {
        var value = style[prop];
        if (typeof value !== 'function') continue;
        delete style[prop];
        fnValues[prop] = value;
      } // $FlowFixMe


      rule[$bed4ab6639b32c089500b85303a5b461$var$fnValuesNs] = fnValues;
      return style;
    },
    onUpdate: function onUpdate(data, rule, sheet, options) {
      var styleRule = rule;
      var fnRule = styleRule[$bed4ab6639b32c089500b85303a5b461$var$fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
      // will be returned from that function.

      if (fnRule) {
        // Empty object will remove all currently defined props
        // in case function rule returns a falsy value.
        styleRule.style = fnRule(data) || {};
      }

      var fnValues = styleRule[$bed4ab6639b32c089500b85303a5b461$var$fnValuesNs]; // If we have a fn values map, it is a rule with function values.

      if (fnValues) {
        for (var prop in fnValues) {
          styleRule.prop(prop, fnValues[prop](data), options);
        }
      }
    }
  };
}

$bed4ab6639b32c089500b85303a5b461$exports.default = $bed4ab6639b32c089500b85303a5b461$export$default;