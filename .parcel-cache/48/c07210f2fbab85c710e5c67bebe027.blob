var $a3846c0d13582047e0b043d4961191$exports = {};
$parcel$require("44a3846c0d13582047e0b043d4961191", "@babel/runtime/helpers/esm/extends");
$parcel$require("44a3846c0d13582047e0b043d4961191", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("44a3846c0d13582047e0b043d4961191", "react");
$parcel$require("44a3846c0d13582047e0b043d4961191", "prop-types");
$parcel$require("44a3846c0d13582047e0b043d4961191", "@material-ui/styles");
$parcel$require("44a3846c0d13582047e0b043d4961191", "./SelectInput");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../FormControl/formControlState");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../FormControl/useFormControl");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../styles/withStyles");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../internal/svg-icons/ArrowDropDown");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../Input");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../NativeSelect/NativeSelect");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../NativeSelect/NativeSelectInput");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../FilledInput");
$parcel$require("44a3846c0d13582047e0b043d4961191", "../OutlinedInput");
var $a3846c0d13582047e0b043d4961191$export$styles = $a3846c0d13582047e0b043d4961191$import$nativeSelectStyles;
$a3846c0d13582047e0b043d4961191$exports.styles = $a3846c0d13582047e0b043d4961191$export$styles;
var $a3846c0d13582047e0b043d4961191$var$_ref = $a3846c0d13582047e0b043d4961191$import$React.createElement($a3846c0d13582047e0b043d4961191$import$Input, null);
var $a3846c0d13582047e0b043d4961191$var$_ref2 = $a3846c0d13582047e0b043d4961191$import$React.createElement($a3846c0d13582047e0b043d4961191$import$FilledInput, null);
var $a3846c0d13582047e0b043d4961191$var$Select = $a3846c0d13582047e0b043d4961191$import$React.forwardRef(function Select(props, ref) {
  var _props$autoWidth = props.autoWidth,
      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
      children = props.children,
      classes = props.classes,
      _props$displayEmpty = props.displayEmpty,
      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,
      _props$IconComponent = props.IconComponent,
      IconComponent = _props$IconComponent === void 0 ? $a3846c0d13582047e0b043d4961191$import$ArrowDropDownIcon : _props$IconComponent,
      input = props.input,
      inputProps = props.inputProps,
      MenuProps = props.MenuProps,
      _props$multiple = props.multiple,
      multiple = _props$multiple === void 0 ? false : _props$multiple,
      _props$native = props.native,
      native = _props$native === void 0 ? false : _props$native,
      onClose = props.onClose,
      onOpen = props.onOpen,
      open = props.open,
      renderValue = props.renderValue,
      SelectDisplayProps = props.SelectDisplayProps,
      _props$variant = props.variant,
      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,
      _props$labelWidth = props.labelWidth,
      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
      other = $a3846c0d13582047e0b043d4961191$import$_objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "input", "inputProps", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant", "labelWidth"]);
  var inputComponent = native ? $a3846c0d13582047e0b043d4961191$import$NativeSelectInput : $a3846c0d13582047e0b043d4961191$import$SelectInput;
  var muiFormControl = $a3846c0d13582047e0b043d4961191$import$useFormControl();
  var fcs = $a3846c0d13582047e0b043d4961191$import$formControlState({
    props: props,
    muiFormControl: muiFormControl,
    states: ['variant']
  });
  var variant = fcs.variant || variantProps;
  var InputComponent = input || {
    standard: $a3846c0d13582047e0b043d4961191$var$_ref,
    outlined: $a3846c0d13582047e0b043d4961191$import$React.createElement($a3846c0d13582047e0b043d4961191$import$OutlinedInput, {
      labelWidth: labelWidth
    }),
    filled: $a3846c0d13582047e0b043d4961191$var$_ref2
  }[variant];
  return $a3846c0d13582047e0b043d4961191$import$React.cloneElement(InputComponent, $a3846c0d13582047e0b043d4961191$import$_extends({
    // Most of the logic is implemented in `SelectInput`.
    // The `Select` component is a simple API wrapper to expose something better to play with.
    inputComponent: inputComponent,
    select: true,
    inputProps: $a3846c0d13582047e0b043d4961191$import$_extends({
      children: children,
      IconComponent: IconComponent,
      variant: variant,
      type: undefined,
      // We render a select. We can ignore the type provided by the `Input`.
      multiple: multiple
    }, native ? {} : {
      autoWidth: autoWidth,
      displayEmpty: displayEmpty,
      MenuProps: MenuProps,
      onClose: onClose,
      onOpen: onOpen,
      open: open,
      renderValue: renderValue,
      SelectDisplayProps: SelectDisplayProps
    }, {}, inputProps, {
      classes: inputProps ? $a3846c0d13582047e0b043d4961191$import$mergeClasses({
        baseClasses: classes,
        newClasses: inputProps.classes,
        Component: Select
      }) : classes
    }, input ? input.props.inputProps : {}),
    ref: ref
  }, other));
});
"production" !== "production" ? $a3846c0d13582047e0b043d4961191$var$Select.propTypes = {
  /**
   * If true, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */
  autoWidth: $a3846c0d13582047e0b043d4961191$import$PropTypes.bool,

  /**
   * The option elements to populate the select with.
   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
   *
   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
   */
  children: $a3846c0d13582047e0b043d4961191$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $a3846c0d13582047e0b043d4961191$import$PropTypes.object.isRequired,

  /**
   * If `true`, a value is displayed even if no items are selected.
   *
   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.
   * You can only use it when the `native` prop is `false` (default).
   */
  displayEmpty: $a3846c0d13582047e0b043d4961191$import$PropTypes.bool,

  /**
   * The icon that displays the arrow.
   */
  IconComponent: $a3846c0d13582047e0b043d4961191$import$PropTypes.elementType,

  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: $a3846c0d13582047e0b043d4961191$import$PropTypes.element,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * When `native` is `true`, the attributes are applied on the `select` element.
   */
  inputProps: $a3846c0d13582047e0b043d4961191$import$PropTypes.object,

  /**
   * The label width to be used on OutlinedInput.
   * This prop is required when the `variant` prop is `outlined`.
   */
  labelWidth: $a3846c0d13582047e0b043d4961191$import$PropTypes.number,

  /**
   * Props applied to the [`Menu`](/api/menu/) element.
   */
  MenuProps: $a3846c0d13582047e0b043d4961191$import$PropTypes.object,

  /**
   * If true, `value` must be an array and the menu will support multiple selections.
   */
  multiple: $a3846c0d13582047e0b043d4961191$import$PropTypes.bool,

  /**
   * If `true`, the component will be using a native `select` element.
   */
  native: $a3846c0d13582047e0b043d4961191$import$PropTypes.bool,

  /**
   * Callback function fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected when `native` is `false` (default).
   */
  onChange: $a3846c0d13582047e0b043d4961191$import$PropTypes.func,

  /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: $a3846c0d13582047e0b043d4961191$import$PropTypes.func,

  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: $a3846c0d13582047e0b043d4961191$import$PropTypes.func,

  /**
   * Control `select` open state.
   * You can only use it when the `native` prop is `false` (default).
   */
  open: $a3846c0d13582047e0b043d4961191$import$PropTypes.bool,

  /**
   * Render the selected value.
   * You can only use it when the `native` prop is `false` (default).
   *
   * @param {*} value The `value` provided to the component.
   * @returns {ReactElement}
   */
  renderValue: $a3846c0d13582047e0b043d4961191$import$PropTypes.func,

  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: $a3846c0d13582047e0b043d4961191$import$PropTypes.object,

  /**
   * The input value. Providing an empty string will select no options.
   * This prop is required when the `native` prop is `false` (default).
   * Set to an empty string `''` if you don't want any of the available options to be selected.
   */
  value: $a3846c0d13582047e0b043d4961191$import$PropTypes.any,

  /**
   * The variant to use.
   */
  variant: $a3846c0d13582047e0b043d4961191$import$PropTypes.oneOf(['standard', 'outlined', 'filled'])
} : void 0;
$a3846c0d13582047e0b043d4961191$var$Select.muiName = 'Select';
var $a3846c0d13582047e0b043d4961191$export$default = $a3846c0d13582047e0b043d4961191$import$withStyles($a3846c0d13582047e0b043d4961191$export$styles, {
  name: 'MuiSelect'
})($a3846c0d13582047e0b043d4961191$var$Select);
$a3846c0d13582047e0b043d4961191$exports.default = $a3846c0d13582047e0b043d4961191$export$default;