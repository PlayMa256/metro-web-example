var $dc5d57b97b803d74c93fe52499e41a$exports = {};
var $dc5d57b97b803d74c93fe52499e41a$var$SetCache = $parcel$require("40dc5d57b97b803d74c93fe52499e41a", "./_SetCache"),
    $dc5d57b97b803d74c93fe52499e41a$var$arrayIncludes = $parcel$require("40dc5d57b97b803d74c93fe52499e41a", "./_arrayIncludes"),
    $dc5d57b97b803d74c93fe52499e41a$var$arrayIncludesWith = $parcel$require("40dc5d57b97b803d74c93fe52499e41a", "./_arrayIncludesWith"),
    $dc5d57b97b803d74c93fe52499e41a$var$cacheHas = $parcel$require("40dc5d57b97b803d74c93fe52499e41a", "./_cacheHas"),
    $dc5d57b97b803d74c93fe52499e41a$var$createSet = $parcel$require("40dc5d57b97b803d74c93fe52499e41a", "./_createSet"),
    $dc5d57b97b803d74c93fe52499e41a$var$setToArray = $parcel$require("40dc5d57b97b803d74c93fe52499e41a", "./_setToArray");
/** Used as the size to enable large array optimizations. */

var $dc5d57b97b803d74c93fe52499e41a$var$LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */

function $dc5d57b97b803d74c93fe52499e41a$var$baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = $dc5d57b97b803d74c93fe52499e41a$var$arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = $dc5d57b97b803d74c93fe52499e41a$var$arrayIncludesWith;
  } else if (length >= $dc5d57b97b803d74c93fe52499e41a$var$LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : $dc5d57b97b803d74c93fe52499e41a$var$createSet(array);

    if (set) {
      return $dc5d57b97b803d74c93fe52499e41a$var$setToArray(set);
    }

    isCommon = false;
    includes = $dc5d57b97b803d74c93fe52499e41a$var$cacheHas;
    seen = new $dc5d57b97b803d74c93fe52499e41a$var$SetCache();
  } else {
    seen = iteratee ? [] : result;
  }

  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;
    value = comparator || value !== 0 ? value : 0;

    if (isCommon && computed === computed) {
      var seenIndex = seen.length;

      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }

      if (iteratee) {
        seen.push(computed);
      }

      result.push(value);
    } else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }

      result.push(value);
    }
  }

  return result;
}

$dc5d57b97b803d74c93fe52499e41a$exports = $dc5d57b97b803d74c93fe52499e41a$var$baseUniq;