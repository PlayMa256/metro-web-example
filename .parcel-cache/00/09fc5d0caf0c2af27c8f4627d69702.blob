var $fda4f77d9be1ec7945c9511710cfb10$exports = {};
// Based on https://github.com/react-bootstrap/dom-helpers/blob/master/src/util/inDOM.js
var $fda4f77d9be1ec7945c9511710cfb10$var$inDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
var $fda4f77d9be1ec7945c9511710cfb10$var$cachedType;

function $fda4f77d9be1ec7945c9511710cfb10$export$_setScrollType(type) {
  $fda4f77d9be1ec7945c9511710cfb10$var$cachedType = type;
} // Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type


$fda4f77d9be1ec7945c9511710cfb10$exports._setScrollType = $fda4f77d9be1ec7945c9511710cfb10$export$_setScrollType;

function $fda4f77d9be1ec7945c9511710cfb10$export$detectScrollType() {
  if ($fda4f77d9be1ec7945c9511710cfb10$var$cachedType) {
    return $fda4f77d9be1ec7945c9511710cfb10$var$cachedType;
  }

  if (!$fda4f77d9be1ec7945c9511710cfb10$var$inDOM || !window.document.body) {
    return 'indeterminate';
  }

  var dummy = window.document.createElement('div');
  dummy.appendChild(document.createTextNode('ABCD'));
  dummy.dir = 'rtl';
  dummy.style.fontSize = '14px';
  dummy.style.width = '4px';
  dummy.style.height = '1px';
  dummy.style.position = 'absolute';
  dummy.style.top = '-1000px';
  dummy.style.overflow = 'scroll';
  document.body.appendChild(dummy);
  $fda4f77d9be1ec7945c9511710cfb10$var$cachedType = 'reverse';

  if (dummy.scrollLeft > 0) {
    $fda4f77d9be1ec7945c9511710cfb10$var$cachedType = 'default';
  } else {
    dummy.scrollLeft = 1;

    if (dummy.scrollLeft === 0) {
      $fda4f77d9be1ec7945c9511710cfb10$var$cachedType = 'negative';
    }
  }

  document.body.removeChild(dummy);
  return $fda4f77d9be1ec7945c9511710cfb10$var$cachedType;
} // Based on https://stackoverflow.com/a/24394376


$fda4f77d9be1ec7945c9511710cfb10$exports.detectScrollType = $fda4f77d9be1ec7945c9511710cfb10$export$detectScrollType;

function $fda4f77d9be1ec7945c9511710cfb10$export$getNormalizedScrollLeft(element, direction) {
  var scrollLeft = element.scrollLeft; // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior

  if (direction !== 'rtl') {
    return scrollLeft;
  }

  var type = $fda4f77d9be1ec7945c9511710cfb10$export$detectScrollType();

  if (type === 'indeterminate') {
    return Number.NaN;
  }

  switch (type) {
    case 'negative':
      return element.scrollWidth - element.clientWidth + scrollLeft;

    case 'reverse':
      return element.scrollWidth - element.clientWidth - scrollLeft;
  }

  return scrollLeft;
}

$fda4f77d9be1ec7945c9511710cfb10$exports.getNormalizedScrollLeft = $fda4f77d9be1ec7945c9511710cfb10$export$getNormalizedScrollLeft;

function $fda4f77d9be1ec7945c9511710cfb10$export$setNormalizedScrollLeft(element, scrollLeft, direction) {
  // Perform the calculations only when direction is rtl to avoid messing up the ltr bahavior
  if (direction !== 'rtl') {
    element.scrollLeft = scrollLeft;
    return;
  }

  var type = $fda4f77d9be1ec7945c9511710cfb10$export$detectScrollType();

  if (type === 'indeterminate') {
    return;
  }

  switch (type) {
    case 'negative':
      element.scrollLeft = element.clientWidth - element.scrollWidth + scrollLeft;
      break;

    case 'reverse':
      element.scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
      break;

    default:
      element.scrollLeft = scrollLeft;
      break;
  }
}

$fda4f77d9be1ec7945c9511710cfb10$exports.setNormalizedScrollLeft = $fda4f77d9be1ec7945c9511710cfb10$export$setNormalizedScrollLeft;