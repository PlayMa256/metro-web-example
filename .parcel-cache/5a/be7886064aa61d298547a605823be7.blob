var $fa955aa69c96e55e2b2fb874f87559$exports = {};
var $fa955aa69c96e55e2b2fb874f87559$var$Stack = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./_Stack"),
    $fa955aa69c96e55e2b2fb874f87559$var$equalArrays = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./_equalArrays"),
    $fa955aa69c96e55e2b2fb874f87559$var$equalByTag = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./_equalByTag"),
    $fa955aa69c96e55e2b2fb874f87559$var$equalObjects = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./_equalObjects"),
    $fa955aa69c96e55e2b2fb874f87559$var$getTag = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./_getTag"),
    $fa955aa69c96e55e2b2fb874f87559$var$isArray = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./isArray"),
    $fa955aa69c96e55e2b2fb874f87559$var$isBuffer = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./isBuffer"),
    $fa955aa69c96e55e2b2fb874f87559$var$isTypedArray = $parcel$require("27fa955aa69c96e55e2b2fb874f87559", "./isTypedArray");
/** Used to compose bitmasks for value comparisons. */

var $fa955aa69c96e55e2b2fb874f87559$var$COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */

var $fa955aa69c96e55e2b2fb874f87559$var$argsTag = '[object Arguments]',
    $fa955aa69c96e55e2b2fb874f87559$var$arrayTag = '[object Array]',
    $fa955aa69c96e55e2b2fb874f87559$var$objectTag = '[object Object]';
/** Used for built-in method references. */

var $fa955aa69c96e55e2b2fb874f87559$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */

var $fa955aa69c96e55e2b2fb874f87559$var$hasOwnProperty = $fa955aa69c96e55e2b2fb874f87559$var$objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function $fa955aa69c96e55e2b2fb874f87559$var$baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = $fa955aa69c96e55e2b2fb874f87559$var$isArray(object),
      othIsArr = $fa955aa69c96e55e2b2fb874f87559$var$isArray(other),
      objTag = objIsArr ? $fa955aa69c96e55e2b2fb874f87559$var$arrayTag : $fa955aa69c96e55e2b2fb874f87559$var$getTag(object),
      othTag = othIsArr ? $fa955aa69c96e55e2b2fb874f87559$var$arrayTag : $fa955aa69c96e55e2b2fb874f87559$var$getTag(other);
  objTag = objTag == $fa955aa69c96e55e2b2fb874f87559$var$argsTag ? $fa955aa69c96e55e2b2fb874f87559$var$objectTag : objTag;
  othTag = othTag == $fa955aa69c96e55e2b2fb874f87559$var$argsTag ? $fa955aa69c96e55e2b2fb874f87559$var$objectTag : othTag;
  var objIsObj = objTag == $fa955aa69c96e55e2b2fb874f87559$var$objectTag,
      othIsObj = othTag == $fa955aa69c96e55e2b2fb874f87559$var$objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && $fa955aa69c96e55e2b2fb874f87559$var$isBuffer(object)) {
    if (!$fa955aa69c96e55e2b2fb874f87559$var$isBuffer(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new $fa955aa69c96e55e2b2fb874f87559$var$Stack());
    return objIsArr || $fa955aa69c96e55e2b2fb874f87559$var$isTypedArray(object) ? $fa955aa69c96e55e2b2fb874f87559$var$equalArrays(object, other, bitmask, customizer, equalFunc, stack) : $fa955aa69c96e55e2b2fb874f87559$var$equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & $fa955aa69c96e55e2b2fb874f87559$var$COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && $fa955aa69c96e55e2b2fb874f87559$var$hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && $fa955aa69c96e55e2b2fb874f87559$var$hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new $fa955aa69c96e55e2b2fb874f87559$var$Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new $fa955aa69c96e55e2b2fb874f87559$var$Stack());
  return $fa955aa69c96e55e2b2fb874f87559$var$equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

$fa955aa69c96e55e2b2fb874f87559$exports = $fa955aa69c96e55e2b2fb874f87559$var$baseIsEqualDeep;