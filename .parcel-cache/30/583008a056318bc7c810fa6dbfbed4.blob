var $ef6674a686968c165ec5ab133c157$exports = {};
$parcel$require("029ef6674a686968c165ec5ab133c157", "@babel/runtime/helpers/esm/extends");
$parcel$require("029ef6674a686968c165ec5ab133c157", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("029ef6674a686968c165ec5ab133c157", "react");
$parcel$require("029ef6674a686968c165ec5ab133c157", "prop-types");
$parcel$require("029ef6674a686968c165ec5ab133c157", "clsx");
$parcel$require("029ef6674a686968c165ec5ab133c157", "@material-ui/utils");
$parcel$require("029ef6674a686968c165ec5ab133c157", "../FormControl");
$parcel$require("029ef6674a686968c165ec5ab133c157", "../styles/withStyles");
$parcel$require("029ef6674a686968c165ec5ab133c157", "../Typography");
$parcel$require("029ef6674a686968c165ec5ab133c157", "../utils/capitalize");

var $ef6674a686968c165ec5ab133c157$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: 'inline-flex',
      alignItems: 'center',
      cursor: 'pointer',
      // For correct alignment with the text.
      verticalAlign: 'middle',
      // Remove grey highlight
      WebkitTapHighlightColor: 'transparent',
      marginLeft: -11,
      marginRight: 16,
      // used for row presentation of radio/checkbox
      '&$disabled': {
        cursor: 'default'
      }
    },

    /* Styles applied to the root element if `labelPlacement="start"`. */
    labelPlacementStart: {
      flexDirection: 'row-reverse',
      marginLeft: 16,
      // used for row presentation of radio/checkbox
      marginRight: -11
    },

    /* Styles applied to the root element if `labelPlacement="top"`. */
    labelPlacementTop: {
      flexDirection: 'column-reverse',
      marginLeft: 16
    },

    /* Styles applied to the root element if `labelPlacement="bottom"`. */
    labelPlacementBottom: {
      flexDirection: 'column',
      marginLeft: 16
    },

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the label's Typography component. */
    label: {
      '&$disabled': {
        color: theme.palette.text.disabled
      }
    }
  };
};
/**
 * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
 * Use this component if you want to display an extra label.
 */


$ef6674a686968c165ec5ab133c157$exports.styles = $ef6674a686968c165ec5ab133c157$export$styles;
var $ef6674a686968c165ec5ab133c157$var$FormControlLabel = $ef6674a686968c165ec5ab133c157$import$React.forwardRef(function FormControlLabel(props, ref) {
  var checked = props.checked,
      classes = props.classes,
      classNameProp = props.className,
      control = props.control,
      disabledProp = props.disabled,
      inputRef = props.inputRef,
      label = props.label,
      _props$labelPlacement = props.labelPlacement,
      labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,
      name = props.name,
      onChange = props.onChange,
      value = props.value,
      other = $ef6674a686968c165ec5ab133c157$import$_objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "name", "onChange", "value"]);
  var muiFormControl = $ef6674a686968c165ec5ab133c157$import$useFormControl();
  var disabled = disabledProp;

  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
    disabled = control.props.disabled;
  }

  if (typeof disabled === 'undefined' && muiFormControl) {
    disabled = muiFormControl.disabled;
  }

  var controlProps = {
    disabled: disabled
  };
  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {
    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
      controlProps[key] = props[key];
    }
  });
  return $ef6674a686968c165ec5ab133c157$import$React.createElement("label", $ef6674a686968c165ec5ab133c157$import$_extends({
    className: $ef6674a686968c165ec5ab133c157$import$clsx(classes.root, classNameProp, labelPlacement !== 'end' && classes["labelPlacement".concat($ef6674a686968c165ec5ab133c157$import$capitalize(labelPlacement))], disabled && classes.disabled),
    ref: ref
  }, other), $ef6674a686968c165ec5ab133c157$import$React.cloneElement(control, controlProps), $ef6674a686968c165ec5ab133c157$import$React.createElement($ef6674a686968c165ec5ab133c157$import$Typography, {
    component: "span",
    className: $ef6674a686968c165ec5ab133c157$import$clsx(classes.label, disabled && classes.disabled)
  }, label));
});
"production" !== "production" ? $ef6674a686968c165ec5ab133c157$var$FormControlLabel.propTypes = {
  /**
   * If `true`, the component appears selected.
   */
  checked: $ef6674a686968c165ec5ab133c157$import$PropTypes.bool,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $ef6674a686968c165ec5ab133c157$import$PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: $ef6674a686968c165ec5ab133c157$import$PropTypes.string,

  /**
   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
   */
  control: $ef6674a686968c165ec5ab133c157$import$PropTypes.element,

  /**
   * If `true`, the control will be disabled.
   */
  disabled: $ef6674a686968c165ec5ab133c157$import$PropTypes.bool,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: $ef6674a686968c165ec5ab133c157$import$refType,

  /**
   * The text to be used in an enclosing label element.
   */
  label: $ef6674a686968c165ec5ab133c157$import$PropTypes.node,

  /**
   * The position of the label.
   */
  labelPlacement: $ef6674a686968c165ec5ab133c157$import$PropTypes.oneOf(['end', 'start', 'top', 'bottom']),

  /*
   * @ignore
   */
  name: $ef6674a686968c165ec5ab133c157$import$PropTypes.string,

  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: $ef6674a686968c165ec5ab133c157$import$PropTypes.func,

  /**
   * The value of the component.
   */
  value: $ef6674a686968c165ec5ab133c157$import$PropTypes.any
} : void 0;
var $ef6674a686968c165ec5ab133c157$export$default = $ef6674a686968c165ec5ab133c157$import$withStyles($ef6674a686968c165ec5ab133c157$export$styles, {
  name: 'MuiFormControlLabel'
})($ef6674a686968c165ec5ab133c157$var$FormControlLabel);
$ef6674a686968c165ec5ab133c157$exports.default = $ef6674a686968c165ec5ab133c157$export$default;