var $c0e6e20fcbf6531ce558dce5061f3a$exports = {};
$parcel$require("42c0e6e20fcbf6531ce558dce5061f3a", "@babel/runtime/helpers/esm/extends");
$parcel$require("42c0e6e20fcbf6531ce558dce5061f3a", "@babel/runtime/helpers/esm/objectWithoutProperties");
// Sorted ASC by size. That's important.
// It can't be configured as it's used statically for propTypes.
var $c0e6e20fcbf6531ce558dce5061f3a$export$keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

$c0e6e20fcbf6531ce558dce5061f3a$exports.keys = $c0e6e20fcbf6531ce558dce5061f3a$export$keys;

function $c0e6e20fcbf6531ce558dce5061f3a$export$default(breakpoints) {
  var _breakpoints$values = breakpoints.values,
      values = _breakpoints$values === void 0 ? {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920
  } : _breakpoints$values,
      _breakpoints$unit = breakpoints.unit,
      unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
      _breakpoints$step = breakpoints.step,
      step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
      other = $c0e6e20fcbf6531ce558dce5061f3a$import$_objectWithoutProperties(breakpoints, ["values", "unit", "step"]);

  function up(key) {
    var value = typeof values[key] === 'number' ? values[key] : key;
    return "@media (min-width:".concat(value).concat(unit, ")");
  }

  function down(key) {
    var endIndex = $c0e6e20fcbf6531ce558dce5061f3a$export$keys.indexOf(key) + 1;
    var upperbound = values[$c0e6e20fcbf6531ce558dce5061f3a$export$keys[endIndex]];

    if (endIndex === $c0e6e20fcbf6531ce558dce5061f3a$export$keys.length) {
      // xl down applies to all sizes
      return up('xs');
    }

    var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
    return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
  }

  function between(start, end) {
    var endIndex = $c0e6e20fcbf6531ce558dce5061f3a$export$keys.indexOf(end) + 1;

    if (endIndex === $c0e6e20fcbf6531ce558dce5061f3a$export$keys.length) {
      return up(start);
    }

    return "@media (min-width:".concat(values[start]).concat(unit, ") and ") + "(max-width:".concat(values[$c0e6e20fcbf6531ce558dce5061f3a$export$keys[endIndex]] - step / 100).concat(unit, ")");
  }

  function only(key) {
    return between(key, key);
  }

  function width(key) {
    return values[key];
  }

  return $c0e6e20fcbf6531ce558dce5061f3a$import$_extends({
    keys: $c0e6e20fcbf6531ce558dce5061f3a$export$keys,
    values: values,
    up: up,
    down: down,
    between: between,
    only: only,
    width: width
  }, other);
}

$c0e6e20fcbf6531ce558dce5061f3a$exports.default = $c0e6e20fcbf6531ce558dce5061f3a$export$default;