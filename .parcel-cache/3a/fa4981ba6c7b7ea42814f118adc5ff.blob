var $cf7b4f0651c8f65de58b1079ec7b9fb3$exports = {};

/*
 * Module dependencies
 */
var $cf7b4f0651c8f65de58b1079ec7b9fb3$var$balanced = $parcel$require("cf7b4f0651c8f65de58b1079ec7b9fb3", "balanced-match");
/**
 * Expose `reduceFunctionCall`
 *
 * @type {Function}
 */

$cf7b4f0651c8f65de58b1079ec7b9fb3$exports = $cf7b4f0651c8f65de58b1079ec7b9fb3$var$reduceFunctionCall;
/**
 * Walkthrough all expressions, evaluate them and insert them into the declaration
 *
 * @param {Array} expressions
 * @param {Object} declaration
 */

function $cf7b4f0651c8f65de58b1079ec7b9fb3$var$reduceFunctionCall(string, functionRE, callback) {
  var call = string;
  return $cf7b4f0651c8f65de58b1079ec7b9fb3$var$getFunctionCalls(string, functionRE).reduce(function (string, obj) {
    return string.replace(obj.functionIdentifier + "(" + obj.matches.body + ")", $cf7b4f0651c8f65de58b1079ec7b9fb3$var$evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE));
  }, string);
}
/**
 * Parses expressions in a value
 *
 * @param {String} value
 * @returns {Array}
 * @api private
 */


function $cf7b4f0651c8f65de58b1079ec7b9fb3$var$getFunctionCalls(call, functionRE) {
  var expressions = [];
  var fnRE = typeof functionRE === "string" ? new RegExp("\\b(" + functionRE + ")\\(") : functionRE;

  do {
    var searchMatch = fnRE.exec(call);

    if (!searchMatch) {
      return expressions;
    }

    if (searchMatch[1] === undefined) {
      throw new Error("Missing the first couple of parenthesis to get the function identifier in " + functionRE);
    }

    var fn = searchMatch[1];
    var startIndex = searchMatch.index;
    var matches = $cf7b4f0651c8f65de58b1079ec7b9fb3$var$balanced("(", ")", call.substring(startIndex));

    if (!matches || matches.start !== searchMatch[0].length - 1) {
      throw new SyntaxError(fn + "(): missing closing ')' in the value '" + call + "'");
    }

    expressions.push({
      matches: matches,
      functionIdentifier: fn
    });
    call = matches.post;
  } while (fnRE.test(call));

  return expressions;
}
/**
 * Evaluates an expression
 *
 * @param {String} expression
 * @returns {String}
 * @api private
 */


function $cf7b4f0651c8f65de58b1079ec7b9fb3$var$evalFunctionCall(string, functionIdentifier, callback, call, functionRE) {
  // allow recursivity
  return callback($cf7b4f0651c8f65de58b1079ec7b9fb3$var$reduceFunctionCall(string, functionRE, callback), functionIdentifier, call);
}