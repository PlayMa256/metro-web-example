var $f1496601ffc63830a3d5a10d525a1403$exports = {};
$parcel$require("f1496601ffc63830a3d5a10d525a1403", "d3-array");
$parcel$require("f1496601ffc63830a3d5a10d525a1403", "./array");
$parcel$require("f1496601ffc63830a3d5a10d525a1403", "./init");

function $f1496601ffc63830a3d5a10d525a1403$export$default() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x <= x ? range[$f1496601ffc63830a3d5a10d525a1403$import$bisect(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = $f1496601ffc63830a3d5a10d525a1403$import$slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = $f1496601ffc63830a3d5a10d525a1403$import$slice.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return $f1496601ffc63830a3d5a10d525a1403$export$default().domain(domain).range(range).unknown(unknown);
  };

  return $f1496601ffc63830a3d5a10d525a1403$import$initRange.apply(scale, arguments);
}

$f1496601ffc63830a3d5a10d525a1403$exports.default = $f1496601ffc63830a3d5a10d525a1403$export$default;