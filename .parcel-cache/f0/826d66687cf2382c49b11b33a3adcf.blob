var $aa09006195f913f1ad47639b059a1e$exports = {};
$parcel$require("58aa09006195f913f1ad47639b059a1e", "prop-types");
$parcel$require("58aa09006195f913f1ad47639b059a1e", "./chainPropTypes");

function $aa09006195f913f1ad47639b059a1e$var$isClassComponent(elementType) {
  // elementType.prototype?.isReactComponent
  var _elementType$prototyp = elementType.prototype,
      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
  return Boolean(prototype.isReactComponent);
}

function $aa09006195f913f1ad47639b059a1e$var$elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
  var propValue = props[propName];
  var safePropName = propFullName || propName;

  if (propValue == null) {
    return null;
  }

  var warningHint;
  /**
   * Blacklisting instead of whitelisting
   *
   * Blacklisting will miss some components, such as React.Fragment. Those will at least
   * trigger a warning in React.
   * We can't whitelist because there is no safe way to detect React.forwardRef
   * or class components. "Safe" means there's no public API.
   *
   */

  if (typeof propValue === 'function' && !$aa09006195f913f1ad47639b059a1e$var$isClassComponent(propValue)) {
    warningHint = 'Did you accidentally provide a plain function component instead?';
  }

  if (warningHint !== undefined) {
    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
  }

  return null;
}

var $aa09006195f913f1ad47639b059a1e$export$default = $aa09006195f913f1ad47639b059a1e$import$chainPropTypes($aa09006195f913f1ad47639b059a1e$import$PropTypes.elementType, $aa09006195f913f1ad47639b059a1e$var$elementTypeAcceptingRef);
$aa09006195f913f1ad47639b059a1e$exports.default = $aa09006195f913f1ad47639b059a1e$export$default;