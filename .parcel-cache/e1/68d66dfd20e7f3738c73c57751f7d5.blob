var $ff3a340ac98d40126917f4b99987670$exports = {};
$parcel$require("0ff3a340ac98d40126917f4b99987670", "@babel/runtime/helpers/esm/extends");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "react");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "prop-types");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "clsx");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "@material-ui/utils");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../internal/SwitchBase");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../internal/svg-icons/CheckBoxOutlineBlank");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../internal/svg-icons/CheckBox");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../styles/colorManipulator");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../internal/svg-icons/IndeterminateCheckBox");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../utils/capitalize");
$parcel$require("0ff3a340ac98d40126917f4b99987670", "../styles/withStyles");

var $ff3a340ac98d40126917f4b99987670$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary
    },

    /* Pseudo-class applied to the root element if `checked={true}`. */
    checked: {},

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Pseudo-class applied to the root element if `indeterminate={true}`. */
    indeterminate: {},

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      '&$checked': {
        color: theme.palette.primary.main,
        '&:hover': {
          backgroundColor: $ff3a340ac98d40126917f4b99987670$import$fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      '&$checked': {
        color: theme.palette.secondary.main,
        '&:hover': {
          backgroundColor: $ff3a340ac98d40126917f4b99987670$import$fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    }
  };
};

$ff3a340ac98d40126917f4b99987670$exports.styles = $ff3a340ac98d40126917f4b99987670$export$styles;
var $ff3a340ac98d40126917f4b99987670$var$defaultCheckedIcon = $ff3a340ac98d40126917f4b99987670$import$React.createElement($ff3a340ac98d40126917f4b99987670$import$CheckBoxIcon, null);
var $ff3a340ac98d40126917f4b99987670$var$defaultIcon = $ff3a340ac98d40126917f4b99987670$import$React.createElement($ff3a340ac98d40126917f4b99987670$import$CheckBoxOutlineBlankIcon, null);
var $ff3a340ac98d40126917f4b99987670$var$defaultIndeterminateIcon = $ff3a340ac98d40126917f4b99987670$import$React.createElement($ff3a340ac98d40126917f4b99987670$import$IndeterminateCheckBoxIcon, null);
var $ff3a340ac98d40126917f4b99987670$var$Checkbox = $ff3a340ac98d40126917f4b99987670$import$React.forwardRef(function Checkbox(props, ref) {
  var _props$checkedIcon = props.checkedIcon,
      checkedIcon = _props$checkedIcon === void 0 ? $ff3a340ac98d40126917f4b99987670$var$defaultCheckedIcon : _props$checkedIcon,
      classes = props.classes,
      _props$color = props.color,
      color = _props$color === void 0 ? 'secondary' : _props$color,
      _props$icon = props.icon,
      icon = _props$icon === void 0 ? $ff3a340ac98d40126917f4b99987670$var$defaultIcon : _props$icon,
      _props$indeterminate = props.indeterminate,
      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,
      _props$indeterminateI = props.indeterminateIcon,
      indeterminateIcon = _props$indeterminateI === void 0 ? $ff3a340ac98d40126917f4b99987670$var$defaultIndeterminateIcon : _props$indeterminateI,
      inputProps = props.inputProps,
      other = $ff3a340ac98d40126917f4b99987670$import$_objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps"]);
  return $ff3a340ac98d40126917f4b99987670$import$React.createElement($ff3a340ac98d40126917f4b99987670$import$SwitchBase, $ff3a340ac98d40126917f4b99987670$import$_extends({
    type: "checkbox",
    checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,
    classes: {
      root: $ff3a340ac98d40126917f4b99987670$import$clsx(classes.root, classes["color".concat($ff3a340ac98d40126917f4b99987670$import$capitalize(color))], indeterminate && classes.indeterminate),
      checked: classes.checked,
      disabled: classes.disabled
    },
    color: color,
    inputProps: $ff3a340ac98d40126917f4b99987670$import$_extends({
      'data-indeterminate': indeterminate
    }, inputProps),
    icon: indeterminate ? indeterminateIcon : icon,
    ref: ref
  }, other));
});
"production" !== "production" ? $ff3a340ac98d40126917f4b99987670$var$Checkbox.propTypes = {
  /**
   * If `true`, the component is checked.
   */
  checked: $ff3a340ac98d40126917f4b99987670$import$PropTypes.bool,

  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: $ff3a340ac98d40126917f4b99987670$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $ff3a340ac98d40126917f4b99987670$import$PropTypes.object.isRequired,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: $ff3a340ac98d40126917f4b99987670$import$PropTypes.oneOf(['primary', 'secondary', 'default']),

  /**
   * If `true`, the switch will be disabled.
   */
  disabled: $ff3a340ac98d40126917f4b99987670$import$PropTypes.bool,

  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: $ff3a340ac98d40126917f4b99987670$import$PropTypes.bool,

  /**
   * The icon to display when the component is unchecked.
   */
  icon: $ff3a340ac98d40126917f4b99987670$import$PropTypes.node,

  /**
   * The id of the `input` element.
   */
  id: $ff3a340ac98d40126917f4b99987670$import$PropTypes.string,

  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the input.
   */
  indeterminate: $ff3a340ac98d40126917f4b99987670$import$PropTypes.bool,

  /**
   * The icon to display when the component is indeterminate.
   */
  indeterminateIcon: $ff3a340ac98d40126917f4b99987670$import$PropTypes.node,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: $ff3a340ac98d40126917f4b99987670$import$PropTypes.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: $ff3a340ac98d40126917f4b99987670$import$refType,

  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: $ff3a340ac98d40126917f4b99987670$import$PropTypes.func,

  /**
   * If `true`, the `input` element will be required.
   */
  required: $ff3a340ac98d40126917f4b99987670$import$PropTypes.bool,

  /**
   * The input component prop `type`.
   */
  type: $ff3a340ac98d40126917f4b99987670$import$PropTypes.string,

  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: $ff3a340ac98d40126917f4b99987670$import$PropTypes.any
} : void 0;
var $ff3a340ac98d40126917f4b99987670$export$default = $ff3a340ac98d40126917f4b99987670$import$withStyles($ff3a340ac98d40126917f4b99987670$export$styles, {
  name: 'MuiCheckbox'
})($ff3a340ac98d40126917f4b99987670$var$Checkbox);
$ff3a340ac98d40126917f4b99987670$exports.default = $ff3a340ac98d40126917f4b99987670$export$default;