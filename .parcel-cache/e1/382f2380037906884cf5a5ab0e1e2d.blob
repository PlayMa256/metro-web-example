var $bf6cd3ac39129ebe2f33714fb455b7a5$exports = {};
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "@babel/runtime/helpers/esm/extends");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "react");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "prop-types");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "clsx");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "@material-ui/utils");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "../InputBase");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "./NotchedOutline");
$parcel$require("bf6cd3ac39129ebe2f33714fb455b7a5", "../styles/withStyles");

var $bf6cd3ac39129ebe2f33714fb455b7a5$export$styles = function styles(theme) {
  var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      '&:hover $notchedOutline': {
        borderColor: theme.palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      '@media (hover: none)': {
        '&:hover $notchedOutline': {
          borderColor: borderColor
        }
      },
      '&$focused $notchedOutline': {
        borderColor: theme.palette.primary.main,
        borderWidth: 2
      },
      '&$error $notchedOutline': {
        borderColor: theme.palette.error.main
      },
      '&$disabled $notchedOutline': {
        borderColor: theme.palette.action.disabled
      }
    },

    /* Styles applied to the root element if the component is focused. */
    focused: {},

    /* Styles applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the root element if `startAdornment` is provided. */
    adornedStart: {
      paddingLeft: 14
    },

    /* Styles applied to the root element if `endAdornment` is provided. */
    adornedEnd: {
      paddingRight: 14
    },

    /* Styles applied to the root element if `error={true}`. */
    error: {},

    /* Styles applied to the `input` element if `margin="dense"`. */
    marginDense: {},

    /* Styles applied to the root element if `multiline={true}`. */
    multiline: {
      padding: '18.5px 14px',
      '&$marginDense': {
        paddingTop: 10.5,
        paddingBottom: 10.5
      }
    },

    /* Styles applied to the `NotchedOutline` element. */
    notchedOutline: {
      borderColor: borderColor
    },

    /* Styles applied to the `input` element. */
    input: {
      padding: '18.5px 14px'
    },

    /* Styles applied to the `input` element if `margin="dense"`. */
    inputMarginDense: {
      paddingTop: 10.5,
      paddingBottom: 10.5
    },

    /* Styles applied to the `input` element if `select={true}`. */
    inputSelect: {
      paddingRight: 24
    },

    /* Styles applied to the `input` element if `multiline={true}`. */
    inputMultiline: {
      padding: 0
    },

    /* Styles applied to the `input` element if `startAdornment` is provided. */
    inputAdornedStart: {
      paddingLeft: 0
    },

    /* Styles applied to the `input` element if `endAdornment` is provided. */
    inputAdornedEnd: {
      paddingRight: 0
    }
  };
};

$bf6cd3ac39129ebe2f33714fb455b7a5$exports.styles = $bf6cd3ac39129ebe2f33714fb455b7a5$export$styles;
var $bf6cd3ac39129ebe2f33714fb455b7a5$var$OutlinedInput = $bf6cd3ac39129ebe2f33714fb455b7a5$import$React.forwardRef(function OutlinedInput(props, ref) {
  var classes = props.classes,
      _props$fullWidth = props.fullWidth,
      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
      _props$inputComponent = props.inputComponent,
      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
      _props$labelWidth = props.labelWidth,
      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline,
      notched = props.notched,
      _props$type = props.type,
      type = _props$type === void 0 ? 'text' : _props$type,
      other = $bf6cd3ac39129ebe2f33714fb455b7a5$import$_objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "labelWidth", "multiline", "notched", "type"]);
  return $bf6cd3ac39129ebe2f33714fb455b7a5$import$React.createElement($bf6cd3ac39129ebe2f33714fb455b7a5$import$InputBase, $bf6cd3ac39129ebe2f33714fb455b7a5$import$_extends({
    renderSuffix: function renderSuffix(state) {
      return $bf6cd3ac39129ebe2f33714fb455b7a5$import$React.createElement($bf6cd3ac39129ebe2f33714fb455b7a5$import$NotchedOutline, {
        className: classes.notchedOutline,
        labelWidth: labelWidth,
        notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      });
    },
    classes: $bf6cd3ac39129ebe2f33714fb455b7a5$import$_extends({}, classes, {
      root: $bf6cd3ac39129ebe2f33714fb455b7a5$import$clsx(classes.root, classes.underline),
      notchedOutline: null
    }),
    fullWidth: fullWidth,
    inputComponent: inputComponent,
    multiline: multiline,
    ref: ref,
    type: type
  }, other));
});
"production" !== "production" ? $bf6cd3ac39129ebe2f33714fb455b7a5$var$OutlinedInput.propTypes = {
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string,

  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.object.isRequired,

  /**
   * The CSS class name of the wrapper element.
   */
  className: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string,

  /**
   * The default `input` element value. Use when the component is not controlled.
   */
  defaultValue: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.any,

  /**
   * If `true`, the `input` element will be disabled.
   */
  disabled: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.node,

  /**
   * If `true`, the input will indicate an error. This is normally obtained via context from
   * FormControl.
   */
  error: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * If `true`, the input will take up the full width of its container.
   */
  fullWidth: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * The id of the `input` element.
   */
  id: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string,

  /**
   * The component used for the native input.
   * Either a string to use a DOM element or a component.
   */
  inputComponent: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.elementType,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: $bf6cd3ac39129ebe2f33714fb455b7a5$import$refType,

  /**
   * The width of the label.
   */
  labelWidth: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.number,

  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.oneOf(['dense', 'none']),

  /**
   * If `true`, a textarea element will be rendered.
   */
  multiline: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * Name attribute of the `input` element.
   */
  name: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string,

  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.func,

  /**
   * The short hint displayed in the input before the user enters a value.
   */
  placeholder: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * If `true`, the `input` element will be required.
   */
  required: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.bool,

  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.oneOfType([$bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string, $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.number]),

  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  rowsMax: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.oneOfType([$bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string, $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.number]),

  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.node,

  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.string,

  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: $bf6cd3ac39129ebe2f33714fb455b7a5$import$PropTypes.any
} : void 0;
$bf6cd3ac39129ebe2f33714fb455b7a5$var$OutlinedInput.muiName = 'Input';
var $bf6cd3ac39129ebe2f33714fb455b7a5$export$default = $bf6cd3ac39129ebe2f33714fb455b7a5$import$withStyles($bf6cd3ac39129ebe2f33714fb455b7a5$export$styles, {
  name: 'MuiOutlinedInput'
})($bf6cd3ac39129ebe2f33714fb455b7a5$var$OutlinedInput);
$bf6cd3ac39129ebe2f33714fb455b7a5$exports.default = $bf6cd3ac39129ebe2f33714fb455b7a5$export$default;