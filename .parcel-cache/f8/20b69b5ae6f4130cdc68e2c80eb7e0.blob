var $d30f2e7790ecd687f4b5feed8c3$exports = {};
$parcel$require("75090d30f2e7790ecd687f4b5feed8c3", "@babel/runtime/helpers/esm/extends");
$parcel$require("75090d30f2e7790ecd687f4b5feed8c3", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("75090d30f2e7790ecd687f4b5feed8c3", "react");
$parcel$require("75090d30f2e7790ecd687f4b5feed8c3", "prop-types");
$parcel$require("75090d30f2e7790ecd687f4b5feed8c3", "clsx");
$parcel$require("75090d30f2e7790ecd687f4b5feed8c3", "../styles/withStyles");

var $d30f2e7790ecd687f4b5feed8c3$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      position: 'relative',
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center',
      flexShrink: 0,
      width: 40,
      height: 40,
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(20),
      lineHeight: 1,
      borderRadius: '50%',
      overflow: 'hidden',
      userSelect: 'none'
    },

    /* Styles applied to the root element if there are children and not `src` or `srcSet`. */
    colorDefault: {
      color: theme.palette.background.default,
      backgroundColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
    },

    /* Styles applied to the img element if either `src` or `srcSet` is defined. */
    img: {
      width: '100%',
      height: '100%',
      textAlign: 'center',
      // Handle non-square image. The property isn't supported by IE 11.
      objectFit: 'cover'
    }
  };
};

$d30f2e7790ecd687f4b5feed8c3$exports.styles = $d30f2e7790ecd687f4b5feed8c3$export$styles;
var $d30f2e7790ecd687f4b5feed8c3$var$Avatar = $d30f2e7790ecd687f4b5feed8c3$import$React.forwardRef(function Avatar(props, ref) {
  var alt = props.alt,
      childrenProp = props.children,
      classes = props.classes,
      classNameProp = props.className,
      _props$component = props.component,
      Component = _props$component === void 0 ? 'div' : _props$component,
      imgProps = props.imgProps,
      sizes = props.sizes,
      src = props.src,
      srcSet = props.srcSet,
      other = $d30f2e7790ecd687f4b5feed8c3$import$_objectWithoutProperties(props, ["alt", "children", "classes", "className", "component", "imgProps", "sizes", "src", "srcSet"]);
  var children = childrenProp;
  var img = src || srcSet;

  if (img) {
    children = $d30f2e7790ecd687f4b5feed8c3$import$React.createElement($d30f2e7790ecd687f4b5feed8c3$import$React.Fragment, null, $d30f2e7790ecd687f4b5feed8c3$import$React.createElement("img", $d30f2e7790ecd687f4b5feed8c3$import$_extends({
      alt: alt,
      src: src,
      srcSet: srcSet,
      sizes: sizes,
      className: classes.img
    }, imgProps)), children);
  }

  return $d30f2e7790ecd687f4b5feed8c3$import$React.createElement(Component, $d30f2e7790ecd687f4b5feed8c3$import$_extends({
    className: $d30f2e7790ecd687f4b5feed8c3$import$clsx(classes.root, classes.system, classNameProp, !img && classes.colorDefault),
    ref: ref
  }, other), children);
});
"production" !== "production" ? $d30f2e7790ecd687f4b5feed8c3$var$Avatar.propTypes = {
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.string,

  /**
   * Used to render icon or text elements inside the Avatar.
   * `src` and `alt` props will not be used and no `img` will
   * be rendered by default.
   *
   * This can be an element, or just a string.
   */
  children: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.string,

  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   */
  component: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.elementType,

  /**
   * Attributes applied to the `img` element if the component
   * is used to display an image.
   */
  imgProps: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.object,

  /**
   * The `sizes` attribute for the `img` element.
   */
  sizes: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.string,

  /**
   * The `src` attribute for the `img` element.
   */
  src: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.string,

  /**
   * The `srcSet` attribute for the `img` element.
   */
  srcSet: $d30f2e7790ecd687f4b5feed8c3$import$PropTypes.string
} : void 0;
var $d30f2e7790ecd687f4b5feed8c3$export$default = $d30f2e7790ecd687f4b5feed8c3$import$withStyles($d30f2e7790ecd687f4b5feed8c3$export$styles, {
  name: 'MuiAvatar'
})($d30f2e7790ecd687f4b5feed8c3$var$Avatar);
$d30f2e7790ecd687f4b5feed8c3$exports.default = $d30f2e7790ecd687f4b5feed8c3$export$default;