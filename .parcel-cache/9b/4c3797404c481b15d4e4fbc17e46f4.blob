var $cebc9285945aa93936570072a1cf28a4$exports = {};
$parcel$require("cebc9285945aa93936570072a1cf28a4", "@babel/runtime/helpers/esm/extends");
$parcel$require("cebc9285945aa93936570072a1cf28a4", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("cebc9285945aa93936570072a1cf28a4", "react");
$parcel$require("cebc9285945aa93936570072a1cf28a4", "prop-types");
$parcel$require("cebc9285945aa93936570072a1cf28a4", "clsx");
$parcel$require("cebc9285945aa93936570072a1cf28a4", "../styles/withStyles");

var $cebc9285945aa93936570072a1cf28a4$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      display: 'flex',
      justifyContent: 'center',
      height: 56,
      backgroundColor: theme.palette.background.paper
    }
  };
};

$cebc9285945aa93936570072a1cf28a4$exports.styles = $cebc9285945aa93936570072a1cf28a4$export$styles;
var $cebc9285945aa93936570072a1cf28a4$var$BottomNavigation = $cebc9285945aa93936570072a1cf28a4$import$React.forwardRef(function BottomNavigation(props, ref) {
  var children = props.children,
      classes = props.classes,
      className = props.className,
      _props$component = props.component,
      Component = _props$component === void 0 ? 'div' : _props$component,
      onChange = props.onChange,
      _props$showLabels = props.showLabels,
      showLabels = _props$showLabels === void 0 ? false : _props$showLabels,
      value = props.value,
      other = $cebc9285945aa93936570072a1cf28a4$import$_objectWithoutProperties(props, ["children", "classes", "className", "component", "onChange", "showLabels", "value"]);
  return $cebc9285945aa93936570072a1cf28a4$import$React.createElement(Component, $cebc9285945aa93936570072a1cf28a4$import$_extends({
    className: $cebc9285945aa93936570072a1cf28a4$import$clsx(classes.root, className),
    ref: ref
  }, other), $cebc9285945aa93936570072a1cf28a4$import$React.Children.map(children, function (child, childIndex) {
    if (!$cebc9285945aa93936570072a1cf28a4$import$React.isValidElement(child)) {
      return null;
    }

    if ("production" !== 'production') {
      if (child.type === $cebc9285945aa93936570072a1cf28a4$import$React.Fragment) {
        console.error(["Material-UI: the BottomNavigation component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
      }
    }

    var childValue = child.props.value === undefined ? childIndex : child.props.value;
    return $cebc9285945aa93936570072a1cf28a4$import$React.cloneElement(child, {
      selected: childValue === value,
      showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
      value: childValue,
      onChange: onChange
    });
  }));
});
"production" !== "production" ? $cebc9285945aa93936570072a1cf28a4$var$BottomNavigation.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // |     To update them edit the d.ts file and run "yarn proptypes"     |
  // ----------------------------------------------------------------------

  /**
   * The content of the component.
   */
  children: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.object,

  /**
   * @ignore
   */
  className: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.string,

  /**
   * The component used for the root node.
   * Either a string to use a DOM element or a component.
   */
  component: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.elementType,

  /**
   * Callback fired when the value changes.
   *
   * @param {object} event The event source of the callback
   * @param {any} value We default to the index of the child
   */
  onChange: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.func,

  /**
   * If `true`, all `BottomNavigationAction`s will show their labels.
   * By default, only the selected `BottomNavigationAction` will show its label.
   */
  showLabels: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.bool,

  /**
   * The value of the currently selected `BottomNavigationAction`.
   */
  value: $cebc9285945aa93936570072a1cf28a4$import$PropTypes.any
} : void 0;
var $cebc9285945aa93936570072a1cf28a4$export$default = $cebc9285945aa93936570072a1cf28a4$import$withStyles($cebc9285945aa93936570072a1cf28a4$export$styles, {
  name: 'MuiBottomNavigation'
})($cebc9285945aa93936570072a1cf28a4$var$BottomNavigation);
$cebc9285945aa93936570072a1cf28a4$exports.default = $cebc9285945aa93936570072a1cf28a4$export$default;