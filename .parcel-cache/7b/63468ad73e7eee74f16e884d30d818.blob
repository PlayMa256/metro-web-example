var $adb6a508e15c95a3121708b6351bff$exports = {};
$parcel$require("14adb6a508e15c95a3121708b6351bff", "@babel/runtime/helpers/esm/extends");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "react");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "prop-types");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "clsx");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "../styles/withStyles");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "../ButtonBase");
$parcel$require("14adb6a508e15c95a3121708b6351bff", "../utils/unsupportedProp");

var $adb6a508e15c95a3121708b6351bff$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      transition: theme.transitions.create(['color', 'padding-top'], {
        duration: theme.transitions.duration.short
      }),
      padding: '6px 12px 8px',
      minWidth: 80,
      maxWidth: 168,
      color: theme.palette.text.secondary,
      flex: '1',
      '&$iconOnly': {
        paddingTop: 16
      },
      '&$selected': {
        paddingTop: 6,
        color: theme.palette.primary.main
      }
    },

    /* Pseudo-class applied to the root element if selected. */
    selected: {},

    /* Pseudo-class applied to the root element if `showLabel={false}` and not selected. */
    iconOnly: {},

    /* Styles applied to the span element that wraps the icon and label. */
    wrapper: {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      width: '100%',
      flexDirection: 'column'
    },

    /* Styles applied to the label's span element. */
    label: {
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(12),
      opacity: 1,
      transition: 'font-size 0.2s, opacity 0.2s',
      transitionDelay: '0.1s',
      '&$iconOnly': {
        opacity: 0,
        transitionDelay: '0s'
      },
      '&$selected': {
        fontSize: theme.typography.pxToRem(14)
      }
    }
  };
};

$adb6a508e15c95a3121708b6351bff$exports.styles = $adb6a508e15c95a3121708b6351bff$export$styles;
var $adb6a508e15c95a3121708b6351bff$var$BottomNavigationAction = $adb6a508e15c95a3121708b6351bff$import$React.forwardRef(function BottomNavigationAction(props, ref) {
  var classes = props.classes,
      className = props.className,
      icon = props.icon,
      label = props.label,
      onChange = props.onChange,
      onClick = props.onClick,
      selected = props.selected,
      showLabel = props.showLabel,
      value = props.value,
      other = $adb6a508e15c95a3121708b6351bff$import$_objectWithoutProperties(props, ["classes", "className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"]);

  var handleChange = function handleChange(event) {
    if (onChange) {
      onChange(event, value);
    }

    if (onClick) {
      onClick(event);
    }
  };

  return $adb6a508e15c95a3121708b6351bff$import$React.createElement($adb6a508e15c95a3121708b6351bff$import$ButtonBase, $adb6a508e15c95a3121708b6351bff$import$_extends({
    ref: ref,
    className: $adb6a508e15c95a3121708b6351bff$import$clsx(classes.root, className, selected ? classes.selected : !showLabel && classes.iconOnly),
    focusRipple: true,
    onClick: handleChange
  }, other), $adb6a508e15c95a3121708b6351bff$import$React.createElement("span", {
    className: classes.wrapper
  }, icon, $adb6a508e15c95a3121708b6351bff$import$React.createElement("span", {
    className: $adb6a508e15c95a3121708b6351bff$import$clsx(classes.label, selected ? classes.selected : !showLabel && classes.iconOnly)
  }, label)));
});
"production" !== "production" ? $adb6a508e15c95a3121708b6351bff$var$BottomNavigationAction.propTypes = {
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: $adb6a508e15c95a3121708b6351bff$import$unsupportedProp,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $adb6a508e15c95a3121708b6351bff$import$PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: $adb6a508e15c95a3121708b6351bff$import$PropTypes.string,

  /**
   * The icon element.
   */
  icon: $adb6a508e15c95a3121708b6351bff$import$PropTypes.node,

  /**
   * The label element.
   */
  label: $adb6a508e15c95a3121708b6351bff$import$PropTypes.node,

  /**
   * @ignore
   */
  onChange: $adb6a508e15c95a3121708b6351bff$import$PropTypes.func,

  /**
   * @ignore
   */
  onClick: $adb6a508e15c95a3121708b6351bff$import$PropTypes.func,

  /**
   * @ignore
   */
  selected: $adb6a508e15c95a3121708b6351bff$import$PropTypes.bool,

  /**
   * If `true`, the `BottomNavigationAction` will show its label.
   * By default, only the selected `BottomNavigationAction`
   * inside `BottomNavigation` will show its label.
   */
  showLabel: $adb6a508e15c95a3121708b6351bff$import$PropTypes.bool,

  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: $adb6a508e15c95a3121708b6351bff$import$PropTypes.any
} : void 0;
var $adb6a508e15c95a3121708b6351bff$export$default = $adb6a508e15c95a3121708b6351bff$import$withStyles($adb6a508e15c95a3121708b6351bff$export$styles, {
  name: 'MuiBottomNavigationAction'
})($adb6a508e15c95a3121708b6351bff$var$BottomNavigationAction);
$adb6a508e15c95a3121708b6351bff$exports.default = $adb6a508e15c95a3121708b6351bff$export$default;