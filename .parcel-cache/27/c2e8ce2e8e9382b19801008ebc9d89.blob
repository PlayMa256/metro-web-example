var $e7ba29eeaf7a4e60f7ad6fd785d4$exports = {};
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "@babel/runtime/helpers/esm/extends");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "react");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "prop-types");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "clsx");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "@material-ui/utils");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "../FormControl/useFormControl");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "../styles/withStyles");
$parcel$require("1303e7ba29eeaf7a4e60f7ad6fd785d4", "../IconButton");
var $e7ba29eeaf7a4e60f7ad6fd785d4$export$styles = {
  root: {
    padding: 9
  },
  checked: {},
  disabled: {},
  input: {
    cursor: 'inherit',
    position: 'absolute',
    opacity: 0,
    width: '100%',
    height: '100%',
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  }
};
/**
 * @ignore - internal component.
 */

$e7ba29eeaf7a4e60f7ad6fd785d4$exports.styles = $e7ba29eeaf7a4e60f7ad6fd785d4$export$styles;
var $e7ba29eeaf7a4e60f7ad6fd785d4$var$SwitchBase = $e7ba29eeaf7a4e60f7ad6fd785d4$import$React.forwardRef(function SwitchBase(props, ref) {
  var autoFocus = props.autoFocus,
      checkedProp = props.checked,
      checkedIcon = props.checkedIcon,
      classes = props.classes,
      classNameProp = props.className,
      defaultChecked = props.defaultChecked,
      disabledProp = props.disabled,
      icon = props.icon,
      id = props.id,
      inputProps = props.inputProps,
      inputRef = props.inputRef,
      name = props.name,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      readOnly = props.readOnly,
      required = props.required,
      tabIndex = props.tabIndex,
      type = props.type,
      value = props.value,
      other = $e7ba29eeaf7a4e60f7ad6fd785d4$import$_objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);

  var _React$useRef = $e7ba29eeaf7a4e60f7ad6fd785d4$import$React.useRef(checkedProp != null),
      isControlled = _React$useRef.current;

  var _React$useState = $e7ba29eeaf7a4e60f7ad6fd785d4$import$React.useState(Boolean(defaultChecked)),
      checkedState = _React$useState[0],
      setCheckedState = _React$useState[1];

  var muiFormControl = $e7ba29eeaf7a4e60f7ad6fd785d4$import$useFormControl();

  var handleFocus = function handleFocus(event) {
    if (onFocus) {
      onFocus(event);
    }

    if (muiFormControl && muiFormControl.onFocus) {
      muiFormControl.onFocus(event);
    }
  };

  var handleBlur = function handleBlur(event) {
    if (onBlur) {
      onBlur(event);
    }

    if (muiFormControl && muiFormControl.onBlur) {
      muiFormControl.onBlur(event);
    }
  };

  var handleInputChange = function handleInputChange(event) {
    var checked = event.target.checked;

    if (!isControlled) {
      setCheckedState(checked);
    }

    if (onChange) {
      onChange(event, checked);
    }
  };

  var disabled = disabledProp;

  if (muiFormControl) {
    if (typeof disabled === 'undefined') {
      disabled = muiFormControl.disabled;
    }
  }

  var checked = isControlled ? checkedProp : checkedState;
  var hasLabelFor = type === 'checkbox' || type === 'radio';
  return $e7ba29eeaf7a4e60f7ad6fd785d4$import$React.createElement($e7ba29eeaf7a4e60f7ad6fd785d4$import$IconButton, $e7ba29eeaf7a4e60f7ad6fd785d4$import$_extends({
    component: "span",
    className: $e7ba29eeaf7a4e60f7ad6fd785d4$import$clsx(classes.root, classNameProp, checked && classes.checked, disabled && classes.disabled),
    disabled: disabled,
    tabIndex: null,
    role: undefined,
    onFocus: handleFocus,
    onBlur: handleBlur,
    ref: ref
  }, other), $e7ba29eeaf7a4e60f7ad6fd785d4$import$React.createElement("input", $e7ba29eeaf7a4e60f7ad6fd785d4$import$_extends({
    autoFocus: autoFocus,
    checked: checkedProp,
    defaultChecked: defaultChecked,
    className: classes.input,
    disabled: disabled,
    id: hasLabelFor && id,
    name: name,
    onChange: handleInputChange,
    readOnly: readOnly,
    ref: inputRef,
    required: required,
    tabIndex: tabIndex,
    type: type,
    value: value
  }, inputProps)), checked ? checkedIcon : icon);
}); // NB: If changed, please update Checkbox, Switch and Radio
// so that the API documentation is updated.

"production" !== "production" ? $e7ba29eeaf7a4e60f7ad6fd785d4$var$SwitchBase.propTypes = {
  /**
   * If `true`, the `input` element will be focused during the first mount.
   */
  autoFocus: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.bool,

  /**
   * If `true`, the component is checked.
   */
  checked: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.bool,

  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.node.isRequired,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.object.isRequired,

  /**
   * @ignore
   */
  className: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.string,

  /**
   * @ignore
   */
  defaultChecked: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.bool,

  /**
   * If `true`, the switch will be disabled.
   */
  disabled: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.bool,

  /**
   * The icon to display when the component is unchecked.
   */
  icon: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.node.isRequired,

  /**
   * The id of the `input` element.
   */
  id: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.string,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: $e7ba29eeaf7a4e60f7ad6fd785d4$import$refType,

  /*
   * @ignore
   */
  name: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.string,

  /**
   * @ignore
   */
  onBlur: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.func,

  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.func,

  /**
   * @ignore
   */
  onFocus: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.func,

  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.bool,

  /**
   * If `true`, the `input` element will be required.
   */
  required: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.bool,

  /**
   * @ignore
   */
  tabIndex: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.oneOfType([$e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.number, $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.string]),

  /**
   * The input component prop `type`.
   */
  type: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.string.isRequired,

  /**
   * The value of the component.
   */
  value: $e7ba29eeaf7a4e60f7ad6fd785d4$import$PropTypes.any
} : void 0;
var $e7ba29eeaf7a4e60f7ad6fd785d4$export$default = $e7ba29eeaf7a4e60f7ad6fd785d4$import$withStyles($e7ba29eeaf7a4e60f7ad6fd785d4$export$styles, {
  name: 'PrivateSwitchBase'
})($e7ba29eeaf7a4e60f7ad6fd785d4$var$SwitchBase);
$e7ba29eeaf7a4e60f7ad6fd785d4$exports.default = $e7ba29eeaf7a4e60f7ad6fd785d4$export$default;