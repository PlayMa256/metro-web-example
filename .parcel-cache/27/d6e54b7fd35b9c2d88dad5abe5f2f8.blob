var $f7357de04fa8792e921e06227da$exports = {};
var $f7357de04fa8792e921e06227da$var$isObject = $parcel$require("77527f7357de04fa8792e921e06227da", "./isObject"),
    $f7357de04fa8792e921e06227da$var$isPrototype = $parcel$require("77527f7357de04fa8792e921e06227da", "./_isPrototype"),
    $f7357de04fa8792e921e06227da$var$nativeKeysIn = $parcel$require("77527f7357de04fa8792e921e06227da", "./_nativeKeysIn");
/** Used for built-in method references. */

var $f7357de04fa8792e921e06227da$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */

var $f7357de04fa8792e921e06227da$var$hasOwnProperty = $f7357de04fa8792e921e06227da$var$objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function $f7357de04fa8792e921e06227da$var$baseKeysIn(object) {
  if (!$f7357de04fa8792e921e06227da$var$isObject(object)) {
    return $f7357de04fa8792e921e06227da$var$nativeKeysIn(object);
  }

  var isProto = $f7357de04fa8792e921e06227da$var$isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !$f7357de04fa8792e921e06227da$var$hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

$f7357de04fa8792e921e06227da$exports = $f7357de04fa8792e921e06227da$var$baseKeysIn;