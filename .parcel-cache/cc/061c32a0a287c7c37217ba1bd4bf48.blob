var $ab5b71faf3c86ca8387534b9549bf3a1$exports = {};
var $ab5b71faf3c86ca8387534b9549bf3a1$var$isPrototype = $parcel$require("ab5b71faf3c86ca8387534b9549bf3a1", "./_isPrototype"),
    $ab5b71faf3c86ca8387534b9549bf3a1$var$nativeKeys = $parcel$require("ab5b71faf3c86ca8387534b9549bf3a1", "./_nativeKeys");
/** Used for built-in method references. */

var $ab5b71faf3c86ca8387534b9549bf3a1$var$objectProto = Object.prototype;
/** Used to check objects for own properties. */

var $ab5b71faf3c86ca8387534b9549bf3a1$var$hasOwnProperty = $ab5b71faf3c86ca8387534b9549bf3a1$var$objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function $ab5b71faf3c86ca8387534b9549bf3a1$var$baseKeys(object) {
  if (!$ab5b71faf3c86ca8387534b9549bf3a1$var$isPrototype(object)) {
    return $ab5b71faf3c86ca8387534b9549bf3a1$var$nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if ($ab5b71faf3c86ca8387534b9549bf3a1$var$hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

$ab5b71faf3c86ca8387534b9549bf3a1$exports = $ab5b71faf3c86ca8387534b9549bf3a1$var$baseKeys;