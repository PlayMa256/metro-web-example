var $d7a8a7519dad4be454e8d9a883b9$exports = {};
$parcel$require("0446d7a8a7519dad4be454e8d9a883b9", "d3-array");
$parcel$require("0446d7a8a7519dad4be454e8d9a883b9", "d3-interpolate");
$parcel$require("0446d7a8a7519dad4be454e8d9a883b9", "./array");
$parcel$require("0446d7a8a7519dad4be454e8d9a883b9", "./constant");
$parcel$require("0446d7a8a7519dad4be454e8d9a883b9", "./number");
var $d7a8a7519dad4be454e8d9a883b9$var$unit = [0, 1];

function $d7a8a7519dad4be454e8d9a883b9$export$identity(x) {
  return x;
}

$d7a8a7519dad4be454e8d9a883b9$exports.identity = $d7a8a7519dad4be454e8d9a883b9$export$identity;

function $d7a8a7519dad4be454e8d9a883b9$var$normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : $d7a8a7519dad4be454e8d9a883b9$import$constant(isNaN(b) ? NaN : 0.5);
}

function $d7a8a7519dad4be454e8d9a883b9$var$clamper(domain) {
  var a = domain[0],
      b = domain[domain.length - 1],
      t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function $d7a8a7519dad4be454e8d9a883b9$var$bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = $d7a8a7519dad4be454e8d9a883b9$var$normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = $d7a8a7519dad4be454e8d9a883b9$var$normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function $d7a8a7519dad4be454e8d9a883b9$var$polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = $d7a8a7519dad4be454e8d9a883b9$var$normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = $d7a8a7519dad4be454e8d9a883b9$import$bisect(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function $d7a8a7519dad4be454e8d9a883b9$export$copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

$d7a8a7519dad4be454e8d9a883b9$exports.copy = $d7a8a7519dad4be454e8d9a883b9$export$copy;

function $d7a8a7519dad4be454e8d9a883b9$export$transformer() {
  var domain = $d7a8a7519dad4be454e8d9a883b9$var$unit,
      range = $d7a8a7519dad4be454e8d9a883b9$var$unit,
      interpolate = $d7a8a7519dad4be454e8d9a883b9$import$interpolateValue,
      transform,
      untransform,
      unknown,
      clamp = $d7a8a7519dad4be454e8d9a883b9$export$identity,
      piecewise,
      output,
      input;

  function rescale() {
    piecewise = Math.min(domain.length, range.length) > 2 ? $d7a8a7519dad4be454e8d9a883b9$var$polymap : $d7a8a7519dad4be454e8d9a883b9$var$bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), $d7a8a7519dad4be454e8d9a883b9$import$interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = $d7a8a7519dad4be454e8d9a883b9$import$map.call(_, $d7a8a7519dad4be454e8d9a883b9$import$number), clamp === $d7a8a7519dad4be454e8d9a883b9$export$identity || (clamp = $d7a8a7519dad4be454e8d9a883b9$var$clamper(domain)), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = $d7a8a7519dad4be454e8d9a883b9$import$slice.call(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = $d7a8a7519dad4be454e8d9a883b9$import$slice.call(_), interpolate = $d7a8a7519dad4be454e8d9a883b9$import$interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? $d7a8a7519dad4be454e8d9a883b9$var$clamper(domain) : $d7a8a7519dad4be454e8d9a883b9$export$identity, scale) : clamp !== $d7a8a7519dad4be454e8d9a883b9$export$identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

$d7a8a7519dad4be454e8d9a883b9$exports.transformer = $d7a8a7519dad4be454e8d9a883b9$export$transformer;

function $d7a8a7519dad4be454e8d9a883b9$export$default(transform, untransform) {
  return $d7a8a7519dad4be454e8d9a883b9$export$transformer()(transform, untransform);
}

$d7a8a7519dad4be454e8d9a883b9$exports.default = $d7a8a7519dad4be454e8d9a883b9$export$default;