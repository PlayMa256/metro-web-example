var $f85f72e027144df34d28dda0dd0c240f$var$$export = $parcel$require("f85f72e027144df34d28dda0dd0c240f", "./_export");
var $f85f72e027144df34d28dda0dd0c240f$var$toInteger = $parcel$require("f85f72e027144df34d28dda0dd0c240f", "./_to-integer");
var $f85f72e027144df34d28dda0dd0c240f$var$aNumberValue = $parcel$require("f85f72e027144df34d28dda0dd0c240f", "./_a-number-value");
var $f85f72e027144df34d28dda0dd0c240f$var$repeat = $parcel$require("f85f72e027144df34d28dda0dd0c240f", "./_string-repeat");
var $f85f72e027144df34d28dda0dd0c240f$var$$toFixed = 1.0.toFixed;
var $f85f72e027144df34d28dda0dd0c240f$var$floor = Math.floor;
var $f85f72e027144df34d28dda0dd0c240f$var$data = [0, 0, 0, 0, 0, 0];
var $f85f72e027144df34d28dda0dd0c240f$var$ERROR = 'Number.toFixed: incorrect invocation!';
var $f85f72e027144df34d28dda0dd0c240f$var$ZERO = '0';

var $f85f72e027144df34d28dda0dd0c240f$var$multiply = function (n, c) {
  var i = -1;
  var c2 = c;

  while (++i < 6) {
    c2 += n * $f85f72e027144df34d28dda0dd0c240f$var$data[i];
    $f85f72e027144df34d28dda0dd0c240f$var$data[i] = c2 % 1e7;
    c2 = $f85f72e027144df34d28dda0dd0c240f$var$floor(c2 / 1e7);
  }
};

var $f85f72e027144df34d28dda0dd0c240f$var$divide = function (n) {
  var i = 6;
  var c = 0;

  while (--i >= 0) {
    c += $f85f72e027144df34d28dda0dd0c240f$var$data[i];
    $f85f72e027144df34d28dda0dd0c240f$var$data[i] = $f85f72e027144df34d28dda0dd0c240f$var$floor(c / n);
    c = c % n * 1e7;
  }
};

var $f85f72e027144df34d28dda0dd0c240f$var$numToString = function () {
  var i = 6;
  var s = '';

  while (--i >= 0) {
    if (s !== '' || i === 0 || $f85f72e027144df34d28dda0dd0c240f$var$data[i] !== 0) {
      var t = String($f85f72e027144df34d28dda0dd0c240f$var$data[i]);
      s = s === '' ? t : s + $f85f72e027144df34d28dda0dd0c240f$var$repeat.call($f85f72e027144df34d28dda0dd0c240f$var$ZERO, 7 - t.length) + t;
    }
  }

  return s;
};

var $f85f72e027144df34d28dda0dd0c240f$var$pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? $f85f72e027144df34d28dda0dd0c240f$var$pow(x, n - 1, acc * x) : $f85f72e027144df34d28dda0dd0c240f$var$pow(x * x, n / 2, acc);
};

var $f85f72e027144df34d28dda0dd0c240f$var$log = function (x) {
  var n = 0;
  var x2 = x;

  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }

  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  }

  return n;
};

$f85f72e027144df34d28dda0dd0c240f$var$$export($f85f72e027144df34d28dda0dd0c240f$var$$export.P + $f85f72e027144df34d28dda0dd0c240f$var$$export.F * (!!$f85f72e027144df34d28dda0dd0c240f$var$$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !$parcel$require("f85f72e027144df34d28dda0dd0c240f", "./_fails")(function () {
  // V8 ~ Android 4.3-
  $f85f72e027144df34d28dda0dd0c240f$var$$toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits) {
    var x = $f85f72e027144df34d28dda0dd0c240f$var$aNumberValue(this, $f85f72e027144df34d28dda0dd0c240f$var$ERROR);
    var f = $f85f72e027144df34d28dda0dd0c240f$var$toInteger(fractionDigits);
    var s = '';
    var m = $f85f72e027144df34d28dda0dd0c240f$var$ZERO;
    var e, z, j, k;
    if (f < 0 || f > 20) throw RangeError($f85f72e027144df34d28dda0dd0c240f$var$ERROR); // eslint-disable-next-line no-self-compare

    if (x != x) return 'NaN';
    if (x <= -1e21 || x >= 1e21) return String(x);

    if (x < 0) {
      s = '-';
      x = -x;
    }

    if (x > 1e-21) {
      e = $f85f72e027144df34d28dda0dd0c240f$var$log(x * $f85f72e027144df34d28dda0dd0c240f$var$pow(2, 69, 1)) - 69;
      z = e < 0 ? x * $f85f72e027144df34d28dda0dd0c240f$var$pow(2, -e, 1) : x / $f85f72e027144df34d28dda0dd0c240f$var$pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;

      if (e > 0) {
        $f85f72e027144df34d28dda0dd0c240f$var$multiply(0, z);
        j = f;

        while (j >= 7) {
          $f85f72e027144df34d28dda0dd0c240f$var$multiply(1e7, 0);
          j -= 7;
        }

        $f85f72e027144df34d28dda0dd0c240f$var$multiply($f85f72e027144df34d28dda0dd0c240f$var$pow(10, j, 1), 0);
        j = e - 1;

        while (j >= 23) {
          $f85f72e027144df34d28dda0dd0c240f$var$divide(1 << 23);
          j -= 23;
        }

        $f85f72e027144df34d28dda0dd0c240f$var$divide(1 << j);
        $f85f72e027144df34d28dda0dd0c240f$var$multiply(1, 1);
        $f85f72e027144df34d28dda0dd0c240f$var$divide(2);
        m = $f85f72e027144df34d28dda0dd0c240f$var$numToString();
      } else {
        $f85f72e027144df34d28dda0dd0c240f$var$multiply(0, z);
        $f85f72e027144df34d28dda0dd0c240f$var$multiply(1 << -e, 0);
        m = $f85f72e027144df34d28dda0dd0c240f$var$numToString() + $f85f72e027144df34d28dda0dd0c240f$var$repeat.call($f85f72e027144df34d28dda0dd0c240f$var$ZERO, f);
      }
    }

    if (f > 0) {
      k = m.length;
      m = s + (k <= f ? '0.' + $f85f72e027144df34d28dda0dd0c240f$var$repeat.call($f85f72e027144df34d28dda0dd0c240f$var$ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    }

    return m;
  }
});