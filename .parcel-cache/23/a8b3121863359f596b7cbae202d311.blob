var $f782d4371985ceac83a89b48f952$exports = {};
$parcel$require("7381f782d4371985ceac83a89b48f952", "./ReactUtils");

function $f782d4371985ceac83a89b48f952$var$ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function $f782d4371985ceac83a89b48f952$var$_objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      $f782d4371985ceac83a89b48f952$var$ownKeys(source, true).forEach(function (key) {
        $f782d4371985ceac83a89b48f952$var$_defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      $f782d4371985ceac83a89b48f952$var$ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function $f782d4371985ceac83a89b48f952$var$_defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function $f782d4371985ceac83a89b48f952$var$_toConsumableArray(arr) {
  return $f782d4371985ceac83a89b48f952$var$_arrayWithoutHoles(arr) || $f782d4371985ceac83a89b48f952$var$_iterableToArray(arr) || $f782d4371985ceac83a89b48f952$var$_nonIterableSpread();
}

function $f782d4371985ceac83a89b48f952$var$_nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function $f782d4371985ceac83a89b48f952$var$_iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function $f782d4371985ceac83a89b48f952$var$_arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var $f782d4371985ceac83a89b48f952$var$stringCache = {
  widthCache: {},
  cacheCount: 0
};
var $f782d4371985ceac83a89b48f952$var$MAX_CACHE_NUM = 2000;
var $f782d4371985ceac83a89b48f952$var$SPAN_STYLE = {
  position: 'absolute',
  top: '-20000px',
  left: 0,
  padding: 0,
  margin: 0,
  border: 'none',
  whiteSpace: 'pre'
};
var $f782d4371985ceac83a89b48f952$var$STYLE_LIST = ['minWidth', 'maxWidth', 'width', 'minHeight', 'maxHeight', 'height', 'top', 'left', 'fontSize', 'lineHeight', 'padding', 'margin', 'paddingLeft', 'paddingRight', 'paddingTop', 'paddingBottom', 'marginLeft', 'marginRight', 'marginTop', 'marginBottom'];
var $f782d4371985ceac83a89b48f952$var$MEASUREMENT_SPAN_ID = 'recharts_measurement_span';

function $f782d4371985ceac83a89b48f952$var$autoCompleteStyle(name, value) {
  if ($f782d4371985ceac83a89b48f952$var$STYLE_LIST.indexOf(name) >= 0 && value === +value) {
    return "".concat(value, "px");
  }

  return value;
}

function $f782d4371985ceac83a89b48f952$var$camelToMiddleLine(text) {
  var strs = text.split('');
  var formatStrs = strs.reduce(function (result, entry) {
    if (entry === entry.toUpperCase()) {
      return [].concat($f782d4371985ceac83a89b48f952$var$_toConsumableArray(result), ['-', entry.toLowerCase()]);
    }

    return [].concat($f782d4371985ceac83a89b48f952$var$_toConsumableArray(result), [entry]);
  }, []);
  return formatStrs.join('');
}

var $f782d4371985ceac83a89b48f952$export$getStyleString = function getStyleString(style) {
  return Object.keys(style).reduce(function (result, s) {
    return "".concat(result).concat($f782d4371985ceac83a89b48f952$var$camelToMiddleLine(s), ":").concat($f782d4371985ceac83a89b48f952$var$autoCompleteStyle(s, style[s]), ";");
  }, '');
};

$f782d4371985ceac83a89b48f952$exports.getStyleString = $f782d4371985ceac83a89b48f952$export$getStyleString;

var $f782d4371985ceac83a89b48f952$export$getStringSize = function getStringSize(text) {
  var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (text === undefined || text === null || $f782d4371985ceac83a89b48f952$import$isSsr()) {
    return {
      width: 0,
      height: 0
    };
  }

  var str = "".concat(text);
  var styleString = $f782d4371985ceac83a89b48f952$export$getStyleString(style);
  var cacheKey = "".concat(str, "-").concat(styleString);

  if ($f782d4371985ceac83a89b48f952$var$stringCache.widthCache[cacheKey]) {
    return $f782d4371985ceac83a89b48f952$var$stringCache.widthCache[cacheKey];
  }

  try {
    var measurementSpan = document.getElementById($f782d4371985ceac83a89b48f952$var$MEASUREMENT_SPAN_ID);

    if (!measurementSpan) {
      measurementSpan = document.createElement('span');
      measurementSpan.setAttribute('id', $f782d4371985ceac83a89b48f952$var$MEASUREMENT_SPAN_ID);
      document.body.appendChild(measurementSpan);
    } // Need to use CSS Object Model (CSSOM) to be able to comply with Content Security Policy (CSP)
    // https://en.wikipedia.org/wiki/Content_Security_Policy


    var measurementSpanStyle = $f782d4371985ceac83a89b48f952$var$_objectSpread({}, $f782d4371985ceac83a89b48f952$var$SPAN_STYLE, {}, style);
    Object.keys(measurementSpanStyle).map(function (styleKey) {
      measurementSpan.style[styleKey] = measurementSpanStyle[styleKey];
      return styleKey;
    });
    measurementSpan.textContent = str;
    var rect = measurementSpan.getBoundingClientRect();
    var result = {
      width: rect.width,
      height: rect.height
    };
    $f782d4371985ceac83a89b48f952$var$stringCache.widthCache[cacheKey] = result;

    if (++$f782d4371985ceac83a89b48f952$var$stringCache.cacheCount > $f782d4371985ceac83a89b48f952$var$MAX_CACHE_NUM) {
      $f782d4371985ceac83a89b48f952$var$stringCache.cacheCount = 0;
      $f782d4371985ceac83a89b48f952$var$stringCache.widthCache = {};
    }

    return result;
  } catch (e) {
    return {
      width: 0,
      height: 0
    };
  }
};

$f782d4371985ceac83a89b48f952$exports.getStringSize = $f782d4371985ceac83a89b48f952$export$getStringSize;

var $f782d4371985ceac83a89b48f952$export$getOffset = function getOffset(el) {
  var html = el.ownerDocument.documentElement;
  var box = {
    top: 0,
    left: 0
  }; // If we don't have gBCR, just use 0,0 rather than error
  // BlackBerry 5, iOS 3 (original iPhone)

  if (typeof el.getBoundingClientRect !== 'undefined') {
    box = el.getBoundingClientRect();
  }

  return {
    top: box.top + window.pageYOffset - html.clientTop,
    left: box.left + window.pageXOffset - html.clientLeft
  };
};
/**
 * Calculate coordinate of cursor in chart
 * @param  {Object} event  Event object
 * @param  {Object} offset The offset of main part in the svg element
 * @return {Object}        {chartX, chartY}
 */


$f782d4371985ceac83a89b48f952$exports.getOffset = $f782d4371985ceac83a89b48f952$export$getOffset;

var $f782d4371985ceac83a89b48f952$export$calculateChartCoordinate = function calculateChartCoordinate(event, offset) {
  return {
    chartX: Math.round(event.pageX - offset.left),
    chartY: Math.round(event.pageY - offset.top)
  };
};

$f782d4371985ceac83a89b48f952$exports.calculateChartCoordinate = $f782d4371985ceac83a89b48f952$export$calculateChartCoordinate;