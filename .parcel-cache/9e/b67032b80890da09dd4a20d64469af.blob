var $af10cba78719519b3893483f34bc4bbb$exports = {};
$parcel$require("af10cba78719519b3893483f34bc4bbb", "@babel/runtime/helpers/esm/extends");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "react");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "prop-types");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "clsx");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "@material-ui/utils");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "../internal/SwitchBase");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "./RadioButtonIcon");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "../styles/colorManipulator");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "../utils/capitalize");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "../utils/createChainedFunction");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "../styles/withStyles");
$parcel$require("af10cba78719519b3893483f34bc4bbb", "../RadioGroup/RadioGroupContext");

var $af10cba78719519b3893483f34bc4bbb$export$styles = function styles(theme) {
  return {
    /* Styles applied to the root element. */
    root: {
      color: theme.palette.text.secondary
    },

    /* Pseudo-class applied to the root element if `checked={true}`. */
    checked: {},

    /* Pseudo-class applied to the root element if `disabled={true}`. */
    disabled: {},

    /* Styles applied to the root element if `color="primary"`. */
    colorPrimary: {
      '&$checked': {
        color: theme.palette.primary.main,
        '&:hover': {
          backgroundColor: $af10cba78719519b3893483f34bc4bbb$import$fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    },

    /* Styles applied to the root element if `color="secondary"`. */
    colorSecondary: {
      '&$checked': {
        color: theme.palette.secondary.main,
        '&:hover': {
          backgroundColor: $af10cba78719519b3893483f34bc4bbb$import$fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          '@media (hover: none)': {
            backgroundColor: 'transparent'
          }
        }
      },
      '&$disabled': {
        color: theme.palette.action.disabled
      }
    }
  };
};

$af10cba78719519b3893483f34bc4bbb$exports.styles = $af10cba78719519b3893483f34bc4bbb$export$styles;
var $af10cba78719519b3893483f34bc4bbb$var$defaultCheckedIcon = $af10cba78719519b3893483f34bc4bbb$import$React.createElement($af10cba78719519b3893483f34bc4bbb$import$RadioButtonIcon, {
  checked: true
});
var $af10cba78719519b3893483f34bc4bbb$var$defaultIcon = $af10cba78719519b3893483f34bc4bbb$import$React.createElement($af10cba78719519b3893483f34bc4bbb$import$RadioButtonIcon, null);
var $af10cba78719519b3893483f34bc4bbb$var$Radio = $af10cba78719519b3893483f34bc4bbb$import$React.forwardRef(function Radio(props, ref) {
  var checkedProp = props.checked,
      classes = props.classes,
      _props$color = props.color,
      color = _props$color === void 0 ? 'secondary' : _props$color,
      nameProp = props.name,
      onChangeProp = props.onChange,
      other = $af10cba78719519b3893483f34bc4bbb$import$_objectWithoutProperties(props, ["checked", "classes", "color", "name", "onChange"]);
  var radioGroup = $af10cba78719519b3893483f34bc4bbb$import$React.useContext($af10cba78719519b3893483f34bc4bbb$import$RadioGroupContext);
  var checked = checkedProp;
  var onChange = $af10cba78719519b3893483f34bc4bbb$import$createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
  var name = nameProp;

  if (radioGroup) {
    if (typeof checked === 'undefined') {
      checked = radioGroup.value === props.value;
    }

    if (typeof name === 'undefined') {
      name = radioGroup.name;
    }
  }

  return $af10cba78719519b3893483f34bc4bbb$import$React.createElement($af10cba78719519b3893483f34bc4bbb$import$SwitchBase, $af10cba78719519b3893483f34bc4bbb$import$_extends({
    color: color,
    type: "radio",
    icon: $af10cba78719519b3893483f34bc4bbb$var$defaultIcon,
    checkedIcon: $af10cba78719519b3893483f34bc4bbb$var$defaultCheckedIcon,
    classes: {
      root: $af10cba78719519b3893483f34bc4bbb$import$clsx(classes.root, classes["color".concat($af10cba78719519b3893483f34bc4bbb$import$capitalize(color))]),
      checked: classes.checked,
      disabled: classes.disabled
    },
    name: name,
    checked: checked,
    onChange: onChange,
    ref: ref
  }, other));
});
"production" !== "production" ? $af10cba78719519b3893483f34bc4bbb$var$Radio.propTypes = {
  /**
   * If `true`, the component is checked.
   */
  checked: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.bool,

  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.node,

  /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */
  classes: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.object.isRequired,

  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */
  color: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.oneOf(['primary', 'secondary', 'default']),

  /**
   * If `true`, the switch will be disabled.
   */
  disabled: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.bool,

  /**
   * If `true`, the ripple effect will be disabled.
   */
  disableRipple: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.bool,

  /**
   * The icon to display when the component is unchecked.
   */
  icon: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.node,

  /**
   * The id of the `input` element.
   */
  id: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.string,

  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.object,

  /**
   * Pass a ref to the `input` element.
   */
  inputRef: $af10cba78719519b3893483f34bc4bbb$import$refType,

  /**
   * Name attribute of the `input` element.
   */
  name: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.string,

  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.func,

  /**
   * If `true`, the `input` element will be required.
   */
  required: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.bool,

  /**
   * The input component prop `type`.
   */
  type: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.string,

  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: $af10cba78719519b3893483f34bc4bbb$import$PropTypes.any
} : void 0;
var $af10cba78719519b3893483f34bc4bbb$export$default = $af10cba78719519b3893483f34bc4bbb$import$withStyles($af10cba78719519b3893483f34bc4bbb$export$styles, {
  name: 'MuiRadio'
})($af10cba78719519b3893483f34bc4bbb$var$Radio);
$af10cba78719519b3893483f34bc4bbb$exports.default = $af10cba78719519b3893483f34bc4bbb$export$default;