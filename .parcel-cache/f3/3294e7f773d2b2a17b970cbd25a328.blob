var $ced658f992aa9be400a8ddbd1610a141$exports = {};
var $ced658f992aa9be400a8ddbd1610a141$var$baseGetTag = $parcel$require("ced658f992aa9be400a8ddbd1610a141", "./_baseGetTag"),
    $ced658f992aa9be400a8ddbd1610a141$var$isObjectLike = $parcel$require("ced658f992aa9be400a8ddbd1610a141", "./isObjectLike");
/** `Object#toString` result references. */

var $ced658f992aa9be400a8ddbd1610a141$var$numberTag = '[object Number]';
/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */

function $ced658f992aa9be400a8ddbd1610a141$var$isNumber(value) {
  return typeof value == 'number' || $ced658f992aa9be400a8ddbd1610a141$var$isObjectLike(value) && $ced658f992aa9be400a8ddbd1610a141$var$baseGetTag(value) == $ced658f992aa9be400a8ddbd1610a141$var$numberTag;
}

$ced658f992aa9be400a8ddbd1610a141$exports = $ced658f992aa9be400a8ddbd1610a141$var$isNumber;