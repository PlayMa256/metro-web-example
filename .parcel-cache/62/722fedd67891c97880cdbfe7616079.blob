var $e02f9523bc41a66b89e910082540f9ec$exports = {};
var $e02f9523bc41a66b89e910082540f9ec$var$hashClear = $parcel$require("e02f9523bc41a66b89e910082540f9ec", "./_hashClear"),
    $e02f9523bc41a66b89e910082540f9ec$var$hashDelete = $parcel$require("e02f9523bc41a66b89e910082540f9ec", "./_hashDelete"),
    $e02f9523bc41a66b89e910082540f9ec$var$hashGet = $parcel$require("e02f9523bc41a66b89e910082540f9ec", "./_hashGet"),
    $e02f9523bc41a66b89e910082540f9ec$var$hashHas = $parcel$require("e02f9523bc41a66b89e910082540f9ec", "./_hashHas"),
    $e02f9523bc41a66b89e910082540f9ec$var$hashSet = $parcel$require("e02f9523bc41a66b89e910082540f9ec", "./_hashSet");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

function $e02f9523bc41a66b89e910082540f9ec$var$Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


$e02f9523bc41a66b89e910082540f9ec$var$Hash.prototype.clear = $e02f9523bc41a66b89e910082540f9ec$var$hashClear;
$e02f9523bc41a66b89e910082540f9ec$var$Hash.prototype['delete'] = $e02f9523bc41a66b89e910082540f9ec$var$hashDelete;
$e02f9523bc41a66b89e910082540f9ec$var$Hash.prototype.get = $e02f9523bc41a66b89e910082540f9ec$var$hashGet;
$e02f9523bc41a66b89e910082540f9ec$var$Hash.prototype.has = $e02f9523bc41a66b89e910082540f9ec$var$hashHas;
$e02f9523bc41a66b89e910082540f9ec$var$Hash.prototype.set = $e02f9523bc41a66b89e910082540f9ec$var$hashSet;
$e02f9523bc41a66b89e910082540f9ec$exports = $e02f9523bc41a66b89e910082540f9ec$var$Hash;