var $cb41889efa2d02f81d5f272b697333c$exports = {};
$parcel$require("7cb41889efa2d02f81d5f272b697333c", "d3-array");
$parcel$require("7cb41889efa2d02f81d5f272b697333c", "./array");
$parcel$require("7cb41889efa2d02f81d5f272b697333c", "./init");

function $cb41889efa2d02f81d5f272b697333c$export$default() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = $cb41889efa2d02f81d5f272b697333c$import$threshold(domain, i / n);

    return scale;
  }

  function scale(x) {
    return isNaN(x = +x) ? unknown : range[$cb41889efa2d02f81d5f272b697333c$import$bisect(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort($cb41889efa2d02f81d5f272b697333c$import$ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = $cb41889efa2d02f81d5f272b697333c$import$slice.call(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return $cb41889efa2d02f81d5f272b697333c$export$default().domain(domain).range(range).unknown(unknown);
  };

  return $cb41889efa2d02f81d5f272b697333c$import$initRange.apply(scale, arguments);
}

$cb41889efa2d02f81d5f272b697333c$exports.default = $cb41889efa2d02f81d5f272b697333c$export$default;