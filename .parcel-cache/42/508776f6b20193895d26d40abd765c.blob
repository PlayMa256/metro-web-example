var $eb01af1b8c5b87957770c253d8720c3$exports = {};
var $eb01af1b8c5b87957770c253d8720c3$var$arrayPush = $parcel$require("5eb01af1b8c5b87957770c253d8720c3", "./_arrayPush"),
    $eb01af1b8c5b87957770c253d8720c3$var$isFlattenable = $parcel$require("5eb01af1b8c5b87957770c253d8720c3", "./_isFlattenable");
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */

function $eb01af1b8c5b87957770c253d8720c3$var$baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;
  predicate || (predicate = $eb01af1b8c5b87957770c253d8720c3$var$isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];

    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        $eb01af1b8c5b87957770c253d8720c3$var$baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        $eb01af1b8c5b87957770c253d8720c3$var$arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }

  return result;
}

$eb01af1b8c5b87957770c253d8720c3$exports = $eb01af1b8c5b87957770c253d8720c3$var$baseFlatten;