var $d644ba9b7c1eae61be34f6a12b3d752d$exports = {};
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "@babel/runtime/helpers/esm/extends");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "@babel/runtime/helpers/esm/objectWithoutProperties");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "deepmerge");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "../colors/indigo");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "../colors/pink");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "../colors/grey");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "../colors/red");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "../colors/common");
$parcel$require("d644ba9b7c1eae61be34f6a12b3d752d", "./colorManipulator");
var $d644ba9b7c1eae61be34f6a12b3d752d$export$light = {
  // The colors used to style the text.
  text: {
    // The most important text.
    primary: 'rgba(0, 0, 0, 0.87)',
    // Secondary text.
    secondary: 'rgba(0, 0, 0, 0.54)',
    // Disabled text have even lower visual prominence.
    disabled: 'rgba(0, 0, 0, 0.38)',
    // Text hints.
    hint: 'rgba(0, 0, 0, 0.38)'
  },
  // The color used to divide different elements.
  divider: 'rgba(0, 0, 0, 0.12)',
  // The background colors used to style the surfaces.
  // Consistency between these values is important.
  background: {
    paper: $d644ba9b7c1eae61be34f6a12b3d752d$import$common.white,
    default: $d644ba9b7c1eae61be34f6a12b3d752d$import$grey[50]
  },
  // The colors used to style the action elements.
  action: {
    // The color of an active action like an icon button.
    active: 'rgba(0, 0, 0, 0.54)',
    // The color of an hovered action.
    hover: 'rgba(0, 0, 0, 0.08)',
    hoverOpacity: 0.08,
    // The color of a selected action.
    selected: 'rgba(0, 0, 0, 0.14)',
    // The color of a disabled action.
    disabled: 'rgba(0, 0, 0, 0.26)',
    // The background color of a disabled action.
    disabledBackground: 'rgba(0, 0, 0, 0.12)'
  }
};
$d644ba9b7c1eae61be34f6a12b3d752d$exports.light = $d644ba9b7c1eae61be34f6a12b3d752d$export$light;
var $d644ba9b7c1eae61be34f6a12b3d752d$export$dark = {
  text: {
    primary: $d644ba9b7c1eae61be34f6a12b3d752d$import$common.white,
    secondary: 'rgba(255, 255, 255, 0.7)',
    disabled: 'rgba(255, 255, 255, 0.5)',
    hint: 'rgba(255, 255, 255, 0.5)',
    icon: 'rgba(255, 255, 255, 0.5)'
  },
  divider: 'rgba(255, 255, 255, 0.12)',
  background: {
    paper: $d644ba9b7c1eae61be34f6a12b3d752d$import$grey[800],
    default: '#303030'
  },
  action: {
    active: $d644ba9b7c1eae61be34f6a12b3d752d$import$common.white,
    hover: 'rgba(255, 255, 255, 0.1)',
    hoverOpacity: 0.1,
    selected: 'rgba(255, 255, 255, 0.2)',
    disabled: 'rgba(255, 255, 255, 0.3)',
    disabledBackground: 'rgba(255, 255, 255, 0.12)'
  }
};
$d644ba9b7c1eae61be34f6a12b3d752d$exports.dark = $d644ba9b7c1eae61be34f6a12b3d752d$export$dark;

function $d644ba9b7c1eae61be34f6a12b3d752d$var$addLightOrDark(intent, direction, shade, tonalOffset) {
  if (!intent[direction]) {
    if (intent.hasOwnProperty(shade)) {
      intent[direction] = intent[shade];
    } else if (direction === 'light') {
      intent.light = $d644ba9b7c1eae61be34f6a12b3d752d$import$lighten(intent.main, tonalOffset);
    } else if (direction === 'dark') {
      intent.dark = $d644ba9b7c1eae61be34f6a12b3d752d$import$darken(intent.main, tonalOffset * 1.5);
    }
  }
}

function $d644ba9b7c1eae61be34f6a12b3d752d$export$default(palette) {
  var _palette$primary = palette.primary,
      primary = _palette$primary === void 0 ? {
    light: $d644ba9b7c1eae61be34f6a12b3d752d$import$indigo[300],
    main: $d644ba9b7c1eae61be34f6a12b3d752d$import$indigo[500],
    dark: $d644ba9b7c1eae61be34f6a12b3d752d$import$indigo[700]
  } : _palette$primary,
      _palette$secondary = palette.secondary,
      secondary = _palette$secondary === void 0 ? {
    light: $d644ba9b7c1eae61be34f6a12b3d752d$import$pink.A200,
    main: $d644ba9b7c1eae61be34f6a12b3d752d$import$pink.A400,
    dark: $d644ba9b7c1eae61be34f6a12b3d752d$import$pink.A700
  } : _palette$secondary,
      _palette$error = palette.error,
      error = _palette$error === void 0 ? {
    light: $d644ba9b7c1eae61be34f6a12b3d752d$import$red[300],
    main: $d644ba9b7c1eae61be34f6a12b3d752d$import$red[500],
    dark: $d644ba9b7c1eae61be34f6a12b3d752d$import$red[700]
  } : _palette$error,
      _palette$type = palette.type,
      type = _palette$type === void 0 ? 'light' : _palette$type,
      _palette$contrastThre = palette.contrastThreshold,
      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
      _palette$tonalOffset = palette.tonalOffset,
      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
      other = $d644ba9b7c1eae61be34f6a12b3d752d$import$_objectWithoutProperties(palette, ["primary", "secondary", "error", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

  function getContrastText(background) {
    if ("production" !== 'production') {
      if (!background) {
        console.error("Material-UI: missing background argument in getContrastText(".concat(background, ")."));
      }
    }

    var contrastText = $d644ba9b7c1eae61be34f6a12b3d752d$import$getContrastRatio(background, $d644ba9b7c1eae61be34f6a12b3d752d$export$dark.text.primary) >= contrastThreshold ? $d644ba9b7c1eae61be34f6a12b3d752d$export$dark.text.primary : $d644ba9b7c1eae61be34f6a12b3d752d$export$light.text.primary;

    if ("production" !== 'production') {
      var contrast = $d644ba9b7c1eae61be34f6a12b3d752d$import$getContrastRatio(background, contrastText);

      if ("production" !== 'production') {
        if (contrast < 3) {
          console.error(["Material-UI: the contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WACG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
        }
      }
    }

    return contrastText;
  }

  function augmentColor(color) {
    var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
    var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
    var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
    color = $d644ba9b7c1eae61be34f6a12b3d752d$import$_extends({}, color);

    if (!color.main && color[mainShade]) {
      color.main = color[mainShade];
    }

    if ("production" !== 'production') {
      if (!color.main) {
        throw new Error(['Material-UI: the color provided to augmentColor(color) is invalid.', "The color object needs to have a `main` property or a `".concat(mainShade, "` property.")].join('\n'));
      }
    }

    $d644ba9b7c1eae61be34f6a12b3d752d$var$addLightOrDark(color, 'light', lightShade, tonalOffset);
    $d644ba9b7c1eae61be34f6a12b3d752d$var$addLightOrDark(color, 'dark', darkShade, tonalOffset);

    if (!color.contrastText) {
      color.contrastText = getContrastText(color.main);
    }

    return color;
  }

  var types = {
    dark: $d644ba9b7c1eae61be34f6a12b3d752d$export$dark,
    light: $d644ba9b7c1eae61be34f6a12b3d752d$export$light
  };

  if ("production" !== 'production') {
    if (!types[type]) {
      console.error("Material-UI: the palette type `".concat(type, "` is not supported."));
    }
  }

  var paletteOutput = $d644ba9b7c1eae61be34f6a12b3d752d$import$deepmerge($d644ba9b7c1eae61be34f6a12b3d752d$import$_extends({
    // A collection of common colors.
    common: $d644ba9b7c1eae61be34f6a12b3d752d$import$common,
    // The palette type, can be light or dark.
    type: type,
    // The colors used to represent primary interface elements for a user.
    primary: augmentColor(primary),
    // The colors used to represent secondary interface elements for a user.
    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
    // The colors used to represent interface elements that the user should be made aware of.
    error: augmentColor(error),
    // The grey colors.
    grey: $d644ba9b7c1eae61be34f6a12b3d752d$import$grey,
    // Used by `getContrastText()` to maximize the contrast between the background and
    // the text.
    contrastThreshold: contrastThreshold,
    // Take a background color and return the color of the text to maximize the contrast.
    getContrastText: getContrastText,
    // Generate a rich color object.
    augmentColor: augmentColor,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: tonalOffset
  }, types[type]), other, {
    clone: false // No need to clone deep

  });
  return paletteOutput;
}

$d644ba9b7c1eae61be34f6a12b3d752d$exports.default = $d644ba9b7c1eae61be34f6a12b3d752d$export$default;