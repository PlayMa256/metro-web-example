var $d6ec755f03490001a7333df159dc9$exports = {};
$parcel$require("609d6ec755f03490001a7333df159dc9", "d3-array");
$parcel$require("609d6ec755f03490001a7333df159dc9", "d3-format");
$parcel$require("609d6ec755f03490001a7333df159dc9", "./nice");
$parcel$require("609d6ec755f03490001a7333df159dc9", "./continuous");
$parcel$require("609d6ec755f03490001a7333df159dc9", "./init");

function $d6ec755f03490001a7333df159dc9$var$transformLog(x) {
  return Math.log(x);
}

function $d6ec755f03490001a7333df159dc9$var$transformExp(x) {
  return Math.exp(x);
}

function $d6ec755f03490001a7333df159dc9$var$transformLogn(x) {
  return -Math.log(-x);
}

function $d6ec755f03490001a7333df159dc9$var$transformExpn(x) {
  return -Math.exp(-x);
}

function $d6ec755f03490001a7333df159dc9$var$pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function $d6ec755f03490001a7333df159dc9$var$powp(base) {
  return base === 10 ? $d6ec755f03490001a7333df159dc9$var$pow10 : base === Math.E ? Math.exp : function (x) {
    return Math.pow(base, x);
  };
}

function $d6ec755f03490001a7333df159dc9$var$logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
    return Math.log(x) / base;
  });
}

function $d6ec755f03490001a7333df159dc9$var$reflect(f) {
  return function (x) {
    return -f(-x);
  };
}

function $d6ec755f03490001a7333df159dc9$export$loggish(transform) {
  var scale = transform($d6ec755f03490001a7333df159dc9$var$transformLog, $d6ec755f03490001a7333df159dc9$var$transformExp),
      domain = scale.domain,
      base = 10,
      logs,
      pows;

  function rescale() {
    logs = $d6ec755f03490001a7333df159dc9$var$logp(base), pows = $d6ec755f03490001a7333df159dc9$var$powp(base);

    if (domain()[0] < 0) {
      logs = $d6ec755f03490001a7333df159dc9$var$reflect(logs), pows = $d6ec755f03490001a7333df159dc9$var$reflect(pows);
      transform($d6ec755f03490001a7333df159dc9$var$transformLogn, $d6ec755f03490001a7333df159dc9$var$transformExpn);
    } else {
      transform($d6ec755f03490001a7333df159dc9$var$transformLog, $d6ec755f03490001a7333df159dc9$var$transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = function (count) {
    var d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r;
    if (r = v < u) i = u, u = v, v = i;
    var i = logs(u),
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.round(i) - 1, j = Math.round(j) + 1;
      if (u > 0) for (; i < j; ++i) {
        for (k = 1, p = pows(i); k < base; ++k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i < j; ++i) {
        for (k = base - 1, p = pows(i); k >= 1; --k) {
          t = p * k;
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
    } else {
      z = $d6ec755f03490001a7333df159dc9$import$ticks(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = function (count, specifier) {
    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function") specifier = $d6ec755f03490001a7333df159dc9$import$format(specifier);
    if (count === Infinity) return specifier;
    if (count == null) count = 10;
    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return function (d) {
      var i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = function () {
    return domain($d6ec755f03490001a7333df159dc9$import$nice(domain(), {
      floor: function (x) {
        return pows(Math.floor(logs(x)));
      },
      ceil: function (x) {
        return pows(Math.ceil(logs(x)));
      }
    }));
  };

  return scale;
}

$d6ec755f03490001a7333df159dc9$exports.loggish = $d6ec755f03490001a7333df159dc9$export$loggish;

function $d6ec755f03490001a7333df159dc9$export$default() {
  var scale = $d6ec755f03490001a7333df159dc9$export$loggish($d6ec755f03490001a7333df159dc9$import$transformer()).domain([1, 10]);

  scale.copy = function () {
    return $d6ec755f03490001a7333df159dc9$import$copy(scale, $d6ec755f03490001a7333df159dc9$export$default()).base(scale.base());
  };

  $d6ec755f03490001a7333df159dc9$import$initRange.apply(scale, arguments);
  return scale;
}

$d6ec755f03490001a7333df159dc9$exports.default = $d6ec755f03490001a7333df159dc9$export$default;