var $cd785ea6bc82ebd532df723600b2$exports = {};
var $cd785ea6bc82ebd532df723600b2$var$ReactPropTypesSecret = $parcel$require("6035cd785ea6bc82ebd532df723600b2", "./lib/ReactPropTypesSecret");

function $cd785ea6bc82ebd532df723600b2$var$emptyFunction() {}

function $cd785ea6bc82ebd532df723600b2$var$emptyFunctionWithReset() {}

$cd785ea6bc82ebd532df723600b2$var$emptyFunctionWithReset.resetWarningCache = $cd785ea6bc82ebd532df723600b2$var$emptyFunction;

$cd785ea6bc82ebd532df723600b2$exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === $cd785ea6bc82ebd532df723600b2$var$ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }

    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    err.name = 'Invariant Violation';
    throw err;
  }

  ;
  shim.isRequired = shim;

  function getShim() {
    return shim;
  }

  ; // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,
    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,
    checkPropTypes: $cd785ea6bc82ebd532df723600b2$var$emptyFunctionWithReset,
    resetWarningCache: $cd785ea6bc82ebd532df723600b2$var$emptyFunction
  };
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};