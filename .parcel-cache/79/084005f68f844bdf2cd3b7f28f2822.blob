var $ee88648ab1036e2392e6de9159f6f16$exports = {};

/**
 * Module dependencies
 */
var $ee88648ab1036e2392e6de9159f6f16$var$balanced = $parcel$require("5ee88648ab1036e2392e6de9159f6f16", "balanced-match");
var $ee88648ab1036e2392e6de9159f6f16$var$reduceFunctionCall = $parcel$require("5ee88648ab1036e2392e6de9159f6f16", "reduce-function-call");
var $ee88648ab1036e2392e6de9159f6f16$var$mexp = $parcel$require("5ee88648ab1036e2392e6de9159f6f16", "math-expression-evaluator");
/**
 * Constantes
 */

var $ee88648ab1036e2392e6de9159f6f16$var$MAX_STACK = 100; // should be enough for a single calc()...

var $ee88648ab1036e2392e6de9159f6f16$var$NESTED_CALC_RE = /(\+|\-|\*|\\|[^a-z]|)(\s*)(\()/g;
/**
 * Global variables
 */

var $ee88648ab1036e2392e6de9159f6f16$var$stack;
/**
 * Expose reduceCSSCalc plugin
 *
 * @type {Function}
 */

$ee88648ab1036e2392e6de9159f6f16$exports = $ee88648ab1036e2392e6de9159f6f16$var$reduceCSSCalc;
/**
 * Reduce CSS calc() in a string, whenever it's possible
 *
 * @param {String} value css input
 */

function $ee88648ab1036e2392e6de9159f6f16$var$reduceCSSCalc(value, decimalPrecision) {
  $ee88648ab1036e2392e6de9159f6f16$var$stack = 0;
  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision); // Allow calc() on multiple lines

  value = value.replace(/\n+/g, " ");
  /**
   * Evaluates an expression
   *
   * @param {String} expression
   * @returns {String}
   */

  function evaluateExpression(expression, functionIdentifier, call) {
    if ($ee88648ab1036e2392e6de9159f6f16$var$stack++ > $ee88648ab1036e2392e6de9159f6f16$var$MAX_STACK) {
      $ee88648ab1036e2392e6de9159f6f16$var$stack = 0;
      throw new Error("Call stack overflow for " + call);
    }

    if (expression === "") {
      throw new Error(functionIdentifier + "(): '" + call + "' must contain a non-whitespace string");
    }

    expression = evaluateNestedExpression(expression, call);
    var units = $ee88648ab1036e2392e6de9159f6f16$var$getUnitsInExpression(expression); // If the expression contains multiple units or CSS variables,
    // then let the expression be (i.e. browser calc())

    if (units.length > 1 || expression.indexOf("var(") > -1) {
      return functionIdentifier + "(" + expression + ")";
    }

    var unit = units[0] || "";

    if (unit === "%") {
      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):
      // console.log(expression)
      expression = expression.replace(/\b[0-9\.]+%/g, function (percent) {
        return parseFloat(percent.slice(0, -1)) * 0.01;
      });
    } // Remove units in expression:


    var toEvaluate = expression.replace(new RegExp(unit, "gi"), "");
    var result;

    try {
      result = $ee88648ab1036e2392e6de9159f6f16$var$mexp.eval(toEvaluate);
    } catch (e) {
      return functionIdentifier + "(" + expression + ")";
    } // Transform back to a percentage result:


    if (unit === "%") {
      result *= 100;
    } // adjust rounding shit
    // (0.1 * 0.2 === 0.020000000000000004)


    if (functionIdentifier.length || unit === "%") {
      result = Math.round(result * decimalPrecision) / decimalPrecision;
    } // Add unit


    result += unit;
    return result;
  }
  /**
   * Evaluates nested expressions
   *
   * @param {String} expression
   * @returns {String}
   */


  function evaluateNestedExpression(expression, call) {
    // Remove the calc part from nested expressions to ensure
    // better browser compatibility
    expression = expression.replace(/((?:\-[a-z]+\-)?calc)/g, "");
    var evaluatedPart = "";
    var nonEvaluatedPart = expression;
    var matches;

    while (matches = $ee88648ab1036e2392e6de9159f6f16$var$NESTED_CALC_RE.exec(nonEvaluatedPart)) {
      if (matches[0].index > 0) {
        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index);
      }

      var balancedExpr = $ee88648ab1036e2392e6de9159f6f16$var$balanced("(", ")", nonEvaluatedPart.substring([0].index));

      if (balancedExpr.body === "") {
        throw new Error("'" + expression + "' must contain a non-whitespace string");
      }

      var evaluated = evaluateExpression(balancedExpr.body, "", call);
      evaluatedPart += balancedExpr.pre + evaluated;
      nonEvaluatedPart = balancedExpr.post;
    }

    return evaluatedPart + nonEvaluatedPart;
  }

  return $ee88648ab1036e2392e6de9159f6f16$var$reduceFunctionCall(value, /((?:\-[a-z]+\-)?calc)\(/, evaluateExpression);
}
/**
 * Checks what units are used in an expression
 *
 * @param {String} expression
 * @returns {Array}
 */


function $ee88648ab1036e2392e6de9159f6f16$var$getUnitsInExpression(expression) {
  var uniqueUnits = [];
  var uniqueLowerCaseUnits = [];
  var unitRegEx = /[\.0-9]([%a-z]+)/gi;
  var matches = unitRegEx.exec(expression);

  while (matches) {
    if (!matches || !matches[1]) {
      continue;
    }

    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {
      uniqueUnits.push(matches[1]);
      uniqueLowerCaseUnits.push(matches[1].toLowerCase());
    }

    matches = unitRegEx.exec(expression);
  }

  return uniqueUnits;
}